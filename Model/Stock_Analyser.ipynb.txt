{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 118,
      "metadata": {
        "id": "OOmBbF6ZTA-p"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "%matplotlib inline\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "import yfinance as yf\n",
        "from datetime import date,timedelta\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense, Dropout, LSTM, Bidirectional"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 119,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "wl4NF27nDsUj",
        "outputId": "10e320e8-e484-4dfd-c7a3-6080c9962e02"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r[*********************100%%**********************]  1 of 1 completed\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "50.465473"
            ]
          },
          "metadata": {},
          "execution_count": 119
        }
      ],
      "source": [
        "today = date.today()\n",
        "years=5\n",
        "\n",
        "start_date = (today - (date(today.year + years, 1, 1) - date(today.year, 1, 1)))\n",
        "end_date = date.today()\n",
        "\n",
        "stock = 'TSLA'\n",
        "pe_value=yf.Ticker(stock).info\n",
        "\n",
        "data = yf.download(stock, start_date, end_date)\n",
        "pe_value['trailingPE']\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 120,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "PNBFq4N4H_UM",
        "outputId": "57c0ccdf-5f67-4d87-ff6c-ad0dd256528d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  Open        High         Low       Close   Adj Close  \\\n",
              "Date                                                                     \n",
              "2024-06-21  182.300003  183.949997  180.690002  183.009995  183.009995   \n",
              "2024-06-24  184.970001  188.800003  182.550003  182.580002  182.580002   \n",
              "2024-06-25  184.399994  187.970001  182.009995  187.350006  187.350006   \n",
              "2024-06-26  186.539993  197.759995  186.360001  196.369995  196.369995   \n",
              "2024-06-27  195.169998  198.720001  194.050003  197.419998  197.419998   \n",
              "\n",
              "              Volume  \n",
              "Date                  \n",
              "2024-06-21  63029500  \n",
              "2024-06-24  61992100  \n",
              "2024-06-25  63678300  \n",
              "2024-06-26  95737100  \n",
              "2024-06-27  72616000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-39a19191-2235-49c3-b807-202358149157\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2024-06-21</th>\n",
              "      <td>182.300003</td>\n",
              "      <td>183.949997</td>\n",
              "      <td>180.690002</td>\n",
              "      <td>183.009995</td>\n",
              "      <td>183.009995</td>\n",
              "      <td>63029500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-24</th>\n",
              "      <td>184.970001</td>\n",
              "      <td>188.800003</td>\n",
              "      <td>182.550003</td>\n",
              "      <td>182.580002</td>\n",
              "      <td>182.580002</td>\n",
              "      <td>61992100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-25</th>\n",
              "      <td>184.399994</td>\n",
              "      <td>187.970001</td>\n",
              "      <td>182.009995</td>\n",
              "      <td>187.350006</td>\n",
              "      <td>187.350006</td>\n",
              "      <td>63678300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-26</th>\n",
              "      <td>186.539993</td>\n",
              "      <td>197.759995</td>\n",
              "      <td>186.360001</td>\n",
              "      <td>196.369995</td>\n",
              "      <td>196.369995</td>\n",
              "      <td>95737100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-27</th>\n",
              "      <td>195.169998</td>\n",
              "      <td>198.720001</td>\n",
              "      <td>194.050003</td>\n",
              "      <td>197.419998</td>\n",
              "      <td>197.419998</td>\n",
              "      <td>72616000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-39a19191-2235-49c3-b807-202358149157')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-39a19191-2235-49c3-b807-202358149157 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-39a19191-2235-49c3-b807-202358149157');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-31ed15c8-924f-46a5-bf65-84af7f254c96\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-31ed15c8-924f-46a5-bf65-84af7f254c96')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-31ed15c8-924f-46a5-bf65-84af7f254c96 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2024-06-21 00:00:00\",\n        \"max\": \"2024-06-27 00:00:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2024-06-24 00:00:00\",\n          \"2024-06-27 00:00:00\",\n          \"2024-06-25 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.985140109100984,\n        \"min\": 182.3000030517578,\n        \"max\": 195.1699981689453,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          184.97000122070312,\n          195.1699981689453,\n          184.39999389648438\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.481731432847723,\n        \"min\": 183.9499969482422,\n        \"max\": 198.72000122070312,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          188.8000030517578,\n          198.72000122070312,\n          187.97000122070312\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.4125717727530915,\n        \"min\": 180.69000244140625,\n        \"max\": 194.0500030517578,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          182.5500030517578,\n          194.0500030517578,\n          182.00999450683594\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.149014657713009,\n        \"min\": 182.5800018310547,\n        \"max\": 197.4199981689453,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          182.5800018310547,\n          197.4199981689453,\n          187.35000610351562\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Adj Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.149014657713009,\n        \"min\": 182.5800018310547,\n        \"max\": 197.4199981689453,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          182.5800018310547,\n          197.4199981689453,\n          187.35000610351562\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14247552,\n        \"min\": 61992100,\n        \"max\": 95737100,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          61992100,\n          72616000,\n          63678300\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 120
        }
      ],
      "source": [
        "data.tail()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 121,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "4YlpOhcHDyCT",
        "outputId": "e2e1d982-456d-4018-d67c-42948b8edcba"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape of data: (1258, 6)\n"
          ]
        }
      ],
      "source": [
        "print(\"Shape of data:\",data.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 122,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "diSgmQ-ND0-u",
        "outputId": "3ba79e3a-bc51-4895-9136-a59b4fb68fbf"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              Open         High          Low        Close    Adj Close  \\\n",
              "count  1258.000000  1258.000000  1258.000000  1258.000000  1258.000000   \n",
              "mean    187.276639   191.440437   182.801352   187.215199   187.215199   \n",
              "std      96.220797    98.233677    93.902111    96.053500    96.053500   \n",
              "min      14.240000    14.334667    14.066667    14.093333    14.093333   \n",
              "25%     131.414829   135.958328   125.562502   133.428833   133.428833   \n",
              "50%     203.660004   208.220001   198.510002   203.351669   203.351669   \n",
              "75%     251.392498   256.570000   246.292503   251.844997   251.844997   \n",
              "max     411.470001   414.496674   405.666656   409.970001   409.970001   \n",
              "\n",
              "             Volume  \n",
              "count  1.258000e+03  \n",
              "mean   1.285914e+08  \n",
              "std    8.320604e+07  \n",
              "min    2.940180e+07  \n",
              "25%    7.783598e+07  \n",
              "50%    1.045224e+08  \n",
              "75%    1.481018e+08  \n",
              "max    9.140820e+08  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0ebf902f-7788-4459-b418-5de3242a3edd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1258.000000</td>\n",
              "      <td>1258.000000</td>\n",
              "      <td>1258.000000</td>\n",
              "      <td>1258.000000</td>\n",
              "      <td>1258.000000</td>\n",
              "      <td>1.258000e+03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>187.276639</td>\n",
              "      <td>191.440437</td>\n",
              "      <td>182.801352</td>\n",
              "      <td>187.215199</td>\n",
              "      <td>187.215199</td>\n",
              "      <td>1.285914e+08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>96.220797</td>\n",
              "      <td>98.233677</td>\n",
              "      <td>93.902111</td>\n",
              "      <td>96.053500</td>\n",
              "      <td>96.053500</td>\n",
              "      <td>8.320604e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>14.240000</td>\n",
              "      <td>14.334667</td>\n",
              "      <td>14.066667</td>\n",
              "      <td>14.093333</td>\n",
              "      <td>14.093333</td>\n",
              "      <td>2.940180e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>131.414829</td>\n",
              "      <td>135.958328</td>\n",
              "      <td>125.562502</td>\n",
              "      <td>133.428833</td>\n",
              "      <td>133.428833</td>\n",
              "      <td>7.783598e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>203.660004</td>\n",
              "      <td>208.220001</td>\n",
              "      <td>198.510002</td>\n",
              "      <td>203.351669</td>\n",
              "      <td>203.351669</td>\n",
              "      <td>1.045224e+08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>251.392498</td>\n",
              "      <td>256.570000</td>\n",
              "      <td>246.292503</td>\n",
              "      <td>251.844997</td>\n",
              "      <td>251.844997</td>\n",
              "      <td>1.481018e+08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>411.470001</td>\n",
              "      <td>414.496674</td>\n",
              "      <td>405.666656</td>\n",
              "      <td>409.970001</td>\n",
              "      <td>409.970001</td>\n",
              "      <td>9.140820e+08</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0ebf902f-7788-4459-b418-5de3242a3edd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0ebf902f-7788-4459-b418-5de3242a3edd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0ebf902f-7788-4459-b418-5de3242a3edd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7fb29627-4a71-4784-9918-c41c2ccb665c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7fb29627-4a71-4784-9918-c41c2ccb665c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7fb29627-4a71-4784-9918-c41c2ccb665c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 396.98756924629083,\n        \"min\": 14.239999771118164,\n        \"max\": 1258.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          187.27663864960542,\n          203.66000366210938,\n          1258.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 396.0997419214147,\n        \"min\": 14.334667205810547,\n        \"max\": 1258.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          191.44043652924142,\n          208.22000122070312,\n          1258.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 397.9528679842485,\n        \"min\": 14.066666603088379,\n        \"max\": 1258.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          182.80135225529511,\n          198.51000213623047,\n          1258.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 396.83704860389474,\n        \"min\": 14.09333324432373,\n        \"max\": 1258.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          187.2151986843831,\n          203.35166931152344,\n          1258.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Adj Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 396.83704860389474,\n        \"min\": 14.09333324432373,\n        \"max\": 1258.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          187.2151986843831,\n          203.35166931152344,\n          1258.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 298294668.1519197,\n        \"min\": 1258.0,\n        \"max\": 914082000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          128591401.03338633,\n          104522400.0,\n          1258.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 122
        }
      ],
      "source": [
        "data.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 123,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "VVsq43LKD2_i",
        "outputId": "94fb1499-cd4e-4cca-f9f0-462d16b176b8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "DatetimeIndex: 1258 entries, 2019-06-28 to 2024-06-27\n",
            "Data columns (total 6 columns):\n",
            " #   Column     Non-Null Count  Dtype  \n",
            "---  ------     --------------  -----  \n",
            " 0   Open       1258 non-null   float64\n",
            " 1   High       1258 non-null   float64\n",
            " 2   Low        1258 non-null   float64\n",
            " 3   Close      1258 non-null   float64\n",
            " 4   Adj Close  1258 non-null   float64\n",
            " 5   Volume     1258 non-null   int64  \n",
            "dtypes: float64(5), int64(1)\n",
            "memory usage: 68.8 KB\n"
          ]
        }
      ],
      "source": [
        "data.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 124,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "2QJYbDz2D7D5",
        "outputId": "da22e001-bb7d-40cf-e1d1-2f8cf0d152c9"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Open         0\n",
              "High         0\n",
              "Low          0\n",
              "Close        0\n",
              "Adj Close    0\n",
              "Volume       0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 124
        }
      ],
      "source": [
        "data.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 125,
      "metadata": {
        "id": "8qDj1OB7D91s"
      },
      "outputs": [],
      "source": [
        "#data = data[['Open','Close', 'High', 'Low', 'Volume']]\n",
        "#data.head(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 126,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 337
        },
        "id": "CCQgVs9OEAbT",
        "outputId": "6949eaa3-fd38-4685-ec4e-33694899ae37"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x700 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "fig, ax =plt.subplots(1,2,figsize=(20,7))\n",
        "ax[0].plot(data['Open'],label='Open',color='green')\n",
        "ax[0].set_xlabel('Date',size=15)\n",
        "ax[0].set_ylabel('Price',size=15)\n",
        "ax[0].legend()\n",
        "\n",
        "ax[1].plot(data['Close'],label='Close',color='Red')\n",
        "ax[1].set_xlabel('Date',size=15)\n",
        "ax[1].set_ylabel('Price',size=15)\n",
        "ax[1].legend()\n",
        "\n",
        "fig.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 127,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "3MYxJSDMXTJF",
        "outputId": "cb0c51dd-bf53-4397-a1e1-049d4a227342"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  Open        High         Low       Close   Adj Close  \\\n",
              "Date                                                                     \n",
              "2019-06-28   14.732667   15.011333   14.720000   14.897333   14.897333   \n",
              "2019-07-01   15.347333   15.540000   15.085333   15.144667   15.144667   \n",
              "2019-07-02   15.259333   15.276667   14.814667   14.970000   14.970000   \n",
              "2019-07-03   15.959333   16.104668   15.634000   15.660000   15.660000   \n",
              "2019-07-05   15.638000   15.696667   15.386667   15.540000   15.540000   \n",
              "...                ...         ...         ...         ...         ...   \n",
              "2024-06-21  182.300003  183.949997  180.690002  183.009995  183.009995   \n",
              "2024-06-24  184.970001  188.800003  182.550003  182.580002  182.580002   \n",
              "2024-06-25  184.399994  187.970001  182.009995  187.350006  187.350006   \n",
              "2024-06-26  186.539993  197.759995  186.360001  196.369995  196.369995   \n",
              "2024-06-27  195.169998  198.720001  194.050003  197.419998  197.419998   \n",
              "\n",
              "               Volume  \n",
              "Date                   \n",
              "2019-06-28  102771000  \n",
              "2019-07-01  123201000  \n",
              "2019-07-02  138885000  \n",
              "2019-07-03  213016500  \n",
              "2019-07-05  105985500  \n",
              "...               ...  \n",
              "2024-06-21   63029500  \n",
              "2024-06-24   61992100  \n",
              "2024-06-25   63678300  \n",
              "2024-06-26   95737100  \n",
              "2024-06-27   72616000  \n",
              "\n",
              "[1258 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9b29c02e-f88f-458b-9b66-fec0797ae5c3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2019-06-28</th>\n",
              "      <td>14.732667</td>\n",
              "      <td>15.011333</td>\n",
              "      <td>14.720000</td>\n",
              "      <td>14.897333</td>\n",
              "      <td>14.897333</td>\n",
              "      <td>102771000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-01</th>\n",
              "      <td>15.347333</td>\n",
              "      <td>15.540000</td>\n",
              "      <td>15.085333</td>\n",
              "      <td>15.144667</td>\n",
              "      <td>15.144667</td>\n",
              "      <td>123201000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-02</th>\n",
              "      <td>15.259333</td>\n",
              "      <td>15.276667</td>\n",
              "      <td>14.814667</td>\n",
              "      <td>14.970000</td>\n",
              "      <td>14.970000</td>\n",
              "      <td>138885000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-03</th>\n",
              "      <td>15.959333</td>\n",
              "      <td>16.104668</td>\n",
              "      <td>15.634000</td>\n",
              "      <td>15.660000</td>\n",
              "      <td>15.660000</td>\n",
              "      <td>213016500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-05</th>\n",
              "      <td>15.638000</td>\n",
              "      <td>15.696667</td>\n",
              "      <td>15.386667</td>\n",
              "      <td>15.540000</td>\n",
              "      <td>15.540000</td>\n",
              "      <td>105985500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-21</th>\n",
              "      <td>182.300003</td>\n",
              "      <td>183.949997</td>\n",
              "      <td>180.690002</td>\n",
              "      <td>183.009995</td>\n",
              "      <td>183.009995</td>\n",
              "      <td>63029500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-24</th>\n",
              "      <td>184.970001</td>\n",
              "      <td>188.800003</td>\n",
              "      <td>182.550003</td>\n",
              "      <td>182.580002</td>\n",
              "      <td>182.580002</td>\n",
              "      <td>61992100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-25</th>\n",
              "      <td>184.399994</td>\n",
              "      <td>187.970001</td>\n",
              "      <td>182.009995</td>\n",
              "      <td>187.350006</td>\n",
              "      <td>187.350006</td>\n",
              "      <td>63678300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-26</th>\n",
              "      <td>186.539993</td>\n",
              "      <td>197.759995</td>\n",
              "      <td>186.360001</td>\n",
              "      <td>196.369995</td>\n",
              "      <td>196.369995</td>\n",
              "      <td>95737100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-27</th>\n",
              "      <td>195.169998</td>\n",
              "      <td>198.720001</td>\n",
              "      <td>194.050003</td>\n",
              "      <td>197.419998</td>\n",
              "      <td>197.419998</td>\n",
              "      <td>72616000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1258 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9b29c02e-f88f-458b-9b66-fec0797ae5c3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9b29c02e-f88f-458b-9b66-fec0797ae5c3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9b29c02e-f88f-458b-9b66-fec0797ae5c3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fa953c0e-da5e-42fc-84a7-101f6bb62db4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fa953c0e-da5e-42fc-84a7-101f6bb62db4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fa953c0e-da5e-42fc-84a7-101f6bb62db4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_82de6655-9711-4128-8928-cbda3452e16e\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_82de6655-9711-4128-8928-cbda3452e16e button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1258,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-06-28 00:00:00\",\n        \"max\": \"2024-06-27 00:00:00\",\n        \"num_unique_values\": 1258,\n        \"samples\": [\n          \"2021-09-20 00:00:00\",\n          \"2019-11-20 00:00:00\",\n          \"2019-09-11 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 96.22079674239927,\n        \"min\": 14.239999771118164,\n        \"max\": 411.4700012207031,\n        \"num_unique_values\": 1234,\n        \"samples\": [\n          252.10333251953125,\n          356.10333251953125,\n          251.1366729736328\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 98.23367676051434,\n        \"min\": 14.334667205810547,\n        \"max\": 414.4966735839844,\n        \"num_unique_values\": 1233,\n        \"samples\": [\n          199.28334045410156,\n          244.6666717529297,\n          309.8399963378906\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 93.90211101065103,\n        \"min\": 14.066666603088379,\n        \"max\": 405.6666564941406,\n        \"num_unique_values\": 1241,\n        \"samples\": [\n          203.75,\n          20.866666793823242,\n          62.47666549682617\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 96.05350011884984,\n        \"min\": 14.09333324432373,\n        \"max\": 409.9700012207031,\n        \"num_unique_values\": 1248,\n        \"samples\": [\n          279.4333190917969,\n          121.81999969482422,\n          173.22000122070312\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Adj Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 96.05350011884984,\n        \"min\": 14.09333324432373,\n        \"max\": 409.9700012207031,\n        \"num_unique_values\": 1248,\n        \"samples\": [\n          279.4333190917969,\n          121.81999969482422,\n          173.22000122070312\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 83206037,\n        \"min\": 29401800,\n        \"max\": 914082000,\n        \"num_unique_values\": 1257,\n        \"samples\": [\n          118536600,\n          100876500,\n          150642000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 127
        }
      ],
      "source": [
        "df=data.copy()\n",
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 128,
      "metadata": {
        "id": "GQEqY11xH5sB"
      },
      "outputs": [],
      "source": [
        "#df = df[['Open']]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 129,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "FmUCKZwFfWDB",
        "outputId": "fb5b49cc-622b-4c3e-e51d-1d02ce6e0efc"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  Open        High         Low       Close   Adj Close  \\\n",
              "Date                                                                     \n",
              "2019-06-28   14.732667   15.011333   14.720000   14.897333   14.897333   \n",
              "2019-07-01   15.347333   15.540000   15.085333   15.144667   15.144667   \n",
              "2019-07-02   15.259333   15.276667   14.814667   14.970000   14.970000   \n",
              "2019-07-03   15.959333   16.104668   15.634000   15.660000   15.660000   \n",
              "2019-07-05   15.638000   15.696667   15.386667   15.540000   15.540000   \n",
              "...                ...         ...         ...         ...         ...   \n",
              "2024-06-21  182.300003  183.949997  180.690002  183.009995  183.009995   \n",
              "2024-06-24  184.970001  188.800003  182.550003  182.580002  182.580002   \n",
              "2024-06-25  184.399994  187.970001  182.009995  187.350006  187.350006   \n",
              "2024-06-26  186.539993  197.759995  186.360001  196.369995  196.369995   \n",
              "2024-06-27  195.169998  198.720001  194.050003  197.419998  197.419998   \n",
              "\n",
              "               Volume  \n",
              "Date                   \n",
              "2019-06-28  102771000  \n",
              "2019-07-01  123201000  \n",
              "2019-07-02  138885000  \n",
              "2019-07-03  213016500  \n",
              "2019-07-05  105985500  \n",
              "...               ...  \n",
              "2024-06-21   63029500  \n",
              "2024-06-24   61992100  \n",
              "2024-06-25   63678300  \n",
              "2024-06-26   95737100  \n",
              "2024-06-27   72616000  \n",
              "\n",
              "[1258 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-92674167-d3bc-462d-8356-83aa5624f5a7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2019-06-28</th>\n",
              "      <td>14.732667</td>\n",
              "      <td>15.011333</td>\n",
              "      <td>14.720000</td>\n",
              "      <td>14.897333</td>\n",
              "      <td>14.897333</td>\n",
              "      <td>102771000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-01</th>\n",
              "      <td>15.347333</td>\n",
              "      <td>15.540000</td>\n",
              "      <td>15.085333</td>\n",
              "      <td>15.144667</td>\n",
              "      <td>15.144667</td>\n",
              "      <td>123201000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-02</th>\n",
              "      <td>15.259333</td>\n",
              "      <td>15.276667</td>\n",
              "      <td>14.814667</td>\n",
              "      <td>14.970000</td>\n",
              "      <td>14.970000</td>\n",
              "      <td>138885000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-03</th>\n",
              "      <td>15.959333</td>\n",
              "      <td>16.104668</td>\n",
              "      <td>15.634000</td>\n",
              "      <td>15.660000</td>\n",
              "      <td>15.660000</td>\n",
              "      <td>213016500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-05</th>\n",
              "      <td>15.638000</td>\n",
              "      <td>15.696667</td>\n",
              "      <td>15.386667</td>\n",
              "      <td>15.540000</td>\n",
              "      <td>15.540000</td>\n",
              "      <td>105985500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-21</th>\n",
              "      <td>182.300003</td>\n",
              "      <td>183.949997</td>\n",
              "      <td>180.690002</td>\n",
              "      <td>183.009995</td>\n",
              "      <td>183.009995</td>\n",
              "      <td>63029500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-24</th>\n",
              "      <td>184.970001</td>\n",
              "      <td>188.800003</td>\n",
              "      <td>182.550003</td>\n",
              "      <td>182.580002</td>\n",
              "      <td>182.580002</td>\n",
              "      <td>61992100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-25</th>\n",
              "      <td>184.399994</td>\n",
              "      <td>187.970001</td>\n",
              "      <td>182.009995</td>\n",
              "      <td>187.350006</td>\n",
              "      <td>187.350006</td>\n",
              "      <td>63678300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-26</th>\n",
              "      <td>186.539993</td>\n",
              "      <td>197.759995</td>\n",
              "      <td>186.360001</td>\n",
              "      <td>196.369995</td>\n",
              "      <td>196.369995</td>\n",
              "      <td>95737100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-27</th>\n",
              "      <td>195.169998</td>\n",
              "      <td>198.720001</td>\n",
              "      <td>194.050003</td>\n",
              "      <td>197.419998</td>\n",
              "      <td>197.419998</td>\n",
              "      <td>72616000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1258 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-92674167-d3bc-462d-8356-83aa5624f5a7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-92674167-d3bc-462d-8356-83aa5624f5a7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-92674167-d3bc-462d-8356-83aa5624f5a7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5b7c8b94-cc21-4467-9324-ce0a929f1c50\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5b7c8b94-cc21-4467-9324-ce0a929f1c50')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5b7c8b94-cc21-4467-9324-ce0a929f1c50 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_1707288f-e631-4167-9015-6ccd12dc36c4\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_1707288f-e631-4167-9015-6ccd12dc36c4 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1258,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-06-28 00:00:00\",\n        \"max\": \"2024-06-27 00:00:00\",\n        \"num_unique_values\": 1258,\n        \"samples\": [\n          \"2021-09-20 00:00:00\",\n          \"2019-11-20 00:00:00\",\n          \"2019-09-11 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 96.22079674239927,\n        \"min\": 14.239999771118164,\n        \"max\": 411.4700012207031,\n        \"num_unique_values\": 1234,\n        \"samples\": [\n          252.10333251953125,\n          356.10333251953125,\n          251.1366729736328\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 98.23367676051434,\n        \"min\": 14.334667205810547,\n        \"max\": 414.4966735839844,\n        \"num_unique_values\": 1233,\n        \"samples\": [\n          199.28334045410156,\n          244.6666717529297,\n          309.8399963378906\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 93.90211101065103,\n        \"min\": 14.066666603088379,\n        \"max\": 405.6666564941406,\n        \"num_unique_values\": 1241,\n        \"samples\": [\n          203.75,\n          20.866666793823242,\n          62.47666549682617\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 96.05350011884984,\n        \"min\": 14.09333324432373,\n        \"max\": 409.9700012207031,\n        \"num_unique_values\": 1248,\n        \"samples\": [\n          279.4333190917969,\n          121.81999969482422,\n          173.22000122070312\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Adj Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 96.05350011884984,\n        \"min\": 14.09333324432373,\n        \"max\": 409.9700012207031,\n        \"num_unique_values\": 1248,\n        \"samples\": [\n          279.4333190917969,\n          121.81999969482422,\n          173.22000122070312\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 83206037,\n        \"min\": 29401800,\n        \"max\": 914082000,\n        \"num_unique_values\": 1257,\n        \"samples\": [\n          118536600,\n          100876500,\n          150642000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 129
        }
      ],
      "source": [
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 130,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "id": "bSCjweFAEDWt",
        "outputId": "05ac0ad4-1e0b-4b5a-f440-e908869d7712"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                Open      High       Low     Close  Adj Close    Volume\n",
              "Date                                                                   \n",
              "2019-06-28  0.001240  0.001691  0.001668  0.002031   0.002031  0.082933\n",
              "2019-07-01  0.002788  0.003012  0.002601  0.002656   0.002656  0.106026\n",
              "2019-07-02  0.002566  0.002354  0.001910  0.002214   0.002214  0.123755\n",
              "2019-07-03  0.004328  0.004423  0.004002  0.003957   0.003957  0.207549\n",
              "2019-07-05  0.003519  0.003404  0.003371  0.003654   0.003654  0.086567\n",
              "2019-07-08  0.002961  0.002871  0.003006  0.003190   0.003190  0.066471\n",
              "2019-07-09  0.002580  0.002662  0.002772  0.003142   0.003142  0.071732\n",
              "2019-07-10  0.003449  0.003985  0.003769  0.004634   0.004634  0.121834\n",
              "2019-07-11  0.004119  0.004412  0.004222  0.004581   0.004581  0.094174\n",
              "2019-07-12  0.004389  0.005058  0.004888  0.005672   0.005672  0.122763"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-09e594bb-21b1-46d1-bfd1-6760e4d3a21c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2019-06-28</th>\n",
              "      <td>0.001240</td>\n",
              "      <td>0.001691</td>\n",
              "      <td>0.001668</td>\n",
              "      <td>0.002031</td>\n",
              "      <td>0.002031</td>\n",
              "      <td>0.082933</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-01</th>\n",
              "      <td>0.002788</td>\n",
              "      <td>0.003012</td>\n",
              "      <td>0.002601</td>\n",
              "      <td>0.002656</td>\n",
              "      <td>0.002656</td>\n",
              "      <td>0.106026</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-02</th>\n",
              "      <td>0.002566</td>\n",
              "      <td>0.002354</td>\n",
              "      <td>0.001910</td>\n",
              "      <td>0.002214</td>\n",
              "      <td>0.002214</td>\n",
              "      <td>0.123755</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-03</th>\n",
              "      <td>0.004328</td>\n",
              "      <td>0.004423</td>\n",
              "      <td>0.004002</td>\n",
              "      <td>0.003957</td>\n",
              "      <td>0.003957</td>\n",
              "      <td>0.207549</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-05</th>\n",
              "      <td>0.003519</td>\n",
              "      <td>0.003404</td>\n",
              "      <td>0.003371</td>\n",
              "      <td>0.003654</td>\n",
              "      <td>0.003654</td>\n",
              "      <td>0.086567</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-08</th>\n",
              "      <td>0.002961</td>\n",
              "      <td>0.002871</td>\n",
              "      <td>0.003006</td>\n",
              "      <td>0.003190</td>\n",
              "      <td>0.003190</td>\n",
              "      <td>0.066471</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-09</th>\n",
              "      <td>0.002580</td>\n",
              "      <td>0.002662</td>\n",
              "      <td>0.002772</td>\n",
              "      <td>0.003142</td>\n",
              "      <td>0.003142</td>\n",
              "      <td>0.071732</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-10</th>\n",
              "      <td>0.003449</td>\n",
              "      <td>0.003985</td>\n",
              "      <td>0.003769</td>\n",
              "      <td>0.004634</td>\n",
              "      <td>0.004634</td>\n",
              "      <td>0.121834</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-11</th>\n",
              "      <td>0.004119</td>\n",
              "      <td>0.004412</td>\n",
              "      <td>0.004222</td>\n",
              "      <td>0.004581</td>\n",
              "      <td>0.004581</td>\n",
              "      <td>0.094174</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-12</th>\n",
              "      <td>0.004389</td>\n",
              "      <td>0.005058</td>\n",
              "      <td>0.004888</td>\n",
              "      <td>0.005672</td>\n",
              "      <td>0.005672</td>\n",
              "      <td>0.122763</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-09e594bb-21b1-46d1-bfd1-6760e4d3a21c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-09e594bb-21b1-46d1-bfd1-6760e4d3a21c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-09e594bb-21b1-46d1-bfd1-6760e4d3a21c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d174b3d3-dc96-4126-afe2-10b55a5c659b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d174b3d3-dc96-4126-afe2-10b55a5c659b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d174b3d3-dc96-4126-afe2-10b55a5c659b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1258,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-06-28 00:00:00\",\n        \"max\": \"2024-06-27 00:00:00\",\n        \"num_unique_values\": 1258,\n        \"samples\": [\n          \"2021-09-20 00:00:00\",\n          \"2019-11-20 00:00:00\",\n          \"2019-09-11 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.24222942977939013,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1234,\n        \"samples\": [\n          0.5988050547048166,\n          0.8606181091581049,\n          0.5963715538555079\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.24548476665642868,\n        \"min\": 0.0,\n        \"max\": 0.9999999999999999,\n        \"num_unique_values\": 1233,\n        \"samples\": [\n          0.46218449103212694,\n          0.5755968854510476,\n          0.7384642330406855\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.23979089232554807,\n        \"min\": 0.0,\n        \"max\": 1.0000000000000002,\n        \"num_unique_values\": 1241,\n        \"samples\": [\n          0.48438033272085573,\n          0.017364658749421072,\n          0.12362104224570084\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.24263491104401488,\n        \"min\": 0.0,\n        \"max\": 0.9999999999999999,\n        \"num_unique_values\": 1248,\n        \"samples\": [\n          0.6702592178615211,\n          0.2721217873262694,\n          0.40196020844015473\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Adj Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.24263491104401488,\n        \"min\": 0.0,\n        \"max\": 0.9999999999999999,\n        \"num_unique_values\": 1248,\n        \"samples\": [\n          0.6702592178615211,\n          0.2721217873262694,\n          0.40196020844015473\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09405210757108443,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1257,\n        \"samples\": [\n          0.10075369608136363,\n          0.08079156739350558,\n          0.137044097968961\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 130
        }
      ],
      "source": [
        "MMS = MinMaxScaler()\n",
        "df[df.columns] = MMS.fit_transform(df)\n",
        "df.head(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 131,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "XfyNTXnbEG50",
        "outputId": "2cfdabf4-344c-46dc-f2c4-4c9eae6b2b14"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "944"
            ]
          },
          "metadata": {},
          "execution_count": 131
        }
      ],
      "source": [
        "training_size = round(len(df) * 0.75) # Selecting 75 % for training and 25 % for testing\n",
        "training_size"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 132,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "CjPC9UtxEJdh",
        "outputId": "ebb7b306-b50d-4edb-99a0-29a4c7bb4b06"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((944, 6), (314, 6))"
            ]
          },
          "metadata": {},
          "execution_count": 132
        }
      ],
      "source": [
        "train_data = df[:training_size]\n",
        "test_data  = df[training_size:]\n",
        "\n",
        "train_data.shape, test_data.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 133,
      "metadata": {
        "id": "2FkWEbVUEL0M"
      },
      "outputs": [],
      "source": [
        "def create_sequence(dataset):\n",
        "  sequences = []\n",
        "  labels = []\n",
        "\n",
        "  start_idx = 0\n",
        "\n",
        "  for stop_idx in range(20,len(dataset)): # Selecting 20 rows at a time\n",
        "    sequences.append(dataset.iloc[start_idx:stop_idx])\n",
        "    labels.append(dataset.iloc[stop_idx])\n",
        "    start_idx += 1\n",
        "\n",
        "  return (np.array(sequences),np.array(labels))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 134,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "JA_VgaMiy81E",
        "outputId": "f6af70c4-5d4a-4320-8933-acba6286ae2e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((924, 20, 6), (924, 6), (294, 20, 6), (294, 6))"
            ]
          },
          "metadata": {},
          "execution_count": 134
        }
      ],
      "source": [
        "x_train, y_train = create_sequence(train_data)\n",
        "x_test, y_test = create_sequence(test_data)\n",
        "x_train.shape, y_train.shape, x_test.shape, y_test.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 135,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "9vF3fMc1YPmn",
        "outputId": "ab039de8-56d7-4b51-e2e6-b66c664e6738"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                Open      High       Low     Close  Adj Close    Volume\n",
              "Date                                                                   \n",
              "2019-06-28  0.001240  0.001691  0.001668  0.002031   0.002031  0.082933\n",
              "2019-07-01  0.002788  0.003012  0.002601  0.002656   0.002656  0.106026\n",
              "2019-07-02  0.002566  0.002354  0.001910  0.002214   0.002214  0.123755\n",
              "2019-07-03  0.004328  0.004423  0.004002  0.003957   0.003957  0.207549\n",
              "2019-07-05  0.003519  0.003404  0.003371  0.003654   0.003654  0.086567\n",
              "...              ...       ...       ...       ...        ...       ...\n",
              "2023-03-22  0.465876  0.465625  0.451694  0.447252   0.447252  0.136744\n",
              "2023-03-23  0.455706  0.462251  0.445821  0.449955   0.449955  0.129755\n",
              "2023-03-24  0.446618  0.444883  0.441990  0.445383   0.445383  0.098240\n",
              "2023-03-27  0.453591  0.457453  0.449115  0.448919   0.448919  0.103370\n",
              "2023-03-28  0.447499  0.444858  0.437598  0.442301   0.442301  0.078280\n",
              "\n",
              "[944 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-10a601e6-da77-4855-82f7-6a966fdc981d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2019-06-28</th>\n",
              "      <td>0.001240</td>\n",
              "      <td>0.001691</td>\n",
              "      <td>0.001668</td>\n",
              "      <td>0.002031</td>\n",
              "      <td>0.002031</td>\n",
              "      <td>0.082933</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-01</th>\n",
              "      <td>0.002788</td>\n",
              "      <td>0.003012</td>\n",
              "      <td>0.002601</td>\n",
              "      <td>0.002656</td>\n",
              "      <td>0.002656</td>\n",
              "      <td>0.106026</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-02</th>\n",
              "      <td>0.002566</td>\n",
              "      <td>0.002354</td>\n",
              "      <td>0.001910</td>\n",
              "      <td>0.002214</td>\n",
              "      <td>0.002214</td>\n",
              "      <td>0.123755</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-03</th>\n",
              "      <td>0.004328</td>\n",
              "      <td>0.004423</td>\n",
              "      <td>0.004002</td>\n",
              "      <td>0.003957</td>\n",
              "      <td>0.003957</td>\n",
              "      <td>0.207549</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-05</th>\n",
              "      <td>0.003519</td>\n",
              "      <td>0.003404</td>\n",
              "      <td>0.003371</td>\n",
              "      <td>0.003654</td>\n",
              "      <td>0.003654</td>\n",
              "      <td>0.086567</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-03-22</th>\n",
              "      <td>0.465876</td>\n",
              "      <td>0.465625</td>\n",
              "      <td>0.451694</td>\n",
              "      <td>0.447252</td>\n",
              "      <td>0.447252</td>\n",
              "      <td>0.136744</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-03-23</th>\n",
              "      <td>0.455706</td>\n",
              "      <td>0.462251</td>\n",
              "      <td>0.445821</td>\n",
              "      <td>0.449955</td>\n",
              "      <td>0.449955</td>\n",
              "      <td>0.129755</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-03-24</th>\n",
              "      <td>0.446618</td>\n",
              "      <td>0.444883</td>\n",
              "      <td>0.441990</td>\n",
              "      <td>0.445383</td>\n",
              "      <td>0.445383</td>\n",
              "      <td>0.098240</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-03-27</th>\n",
              "      <td>0.453591</td>\n",
              "      <td>0.457453</td>\n",
              "      <td>0.449115</td>\n",
              "      <td>0.448919</td>\n",
              "      <td>0.448919</td>\n",
              "      <td>0.103370</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-03-28</th>\n",
              "      <td>0.447499</td>\n",
              "      <td>0.444858</td>\n",
              "      <td>0.437598</td>\n",
              "      <td>0.442301</td>\n",
              "      <td>0.442301</td>\n",
              "      <td>0.078280</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>944 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-10a601e6-da77-4855-82f7-6a966fdc981d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-10a601e6-da77-4855-82f7-6a966fdc981d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-10a601e6-da77-4855-82f7-6a966fdc981d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2ab27a77-ff40-4663-aadf-4c91fea0222e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2ab27a77-ff40-4663-aadf-4c91fea0222e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2ab27a77-ff40-4663-aadf-4c91fea0222e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_19892365-ab19-4d3f-a617-368cc98b6b07\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('train_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_19892365-ab19-4d3f-a617-368cc98b6b07 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('train_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "train_data",
              "summary": "{\n  \"name\": \"train_data\",\n  \"rows\": 944,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-06-28 00:00:00\",\n        \"max\": \"2023-03-28 00:00:00\",\n        \"num_unique_values\": 944,\n        \"samples\": [\n          \"2019-11-13 00:00:00\",\n          \"2020-07-17 00:00:00\",\n          \"2022-09-16 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2709766612037229,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 930,\n        \"samples\": [\n          0.5554884246006669,\n          0.6766692456342793,\n          0.0032542038219640287\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2748674278995941,\n        \"min\": 0.0,\n        \"max\": 0.9999999999999999,\n        \"num_unique_values\": 931,\n        \"samples\": [\n          0.5404444586208994,\n          0.005377822964063063,\n          0.9390663508524479\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2678899435518457,\n        \"min\": 0.0,\n        \"max\": 1.0000000000000002,\n        \"num_unique_values\": 937,\n        \"samples\": [\n          0.32708547567592106,\n          0.005047667266412398,\n          0.09405856964663864\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2713700049850048,\n        \"min\": 0.0,\n        \"max\": 0.9999999999999999,\n        \"num_unique_values\": 939,\n        \"samples\": [\n          0.3166306057839244,\n          0.005175013128489718,\n          0.05498681901776631\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Adj Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2713700049850048,\n        \"min\": 0.0,\n        \"max\": 0.9999999999999999,\n        \"num_unique_values\": 939,\n        \"samples\": [\n          0.3166306057839244,\n          0.005175013128489718,\n          0.05498681901776631\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1062249386089346,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 943,\n        \"samples\": [\n          0.10953076603274269,\n          0.12495837478899154,\n          0.06520548329215461\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 135
        }
      ],
      "source": [
        "train_data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 136,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "r2TydEX2XyN4",
        "outputId": "e69c17c1-18e1-45c5-f73c-94776f72cda8"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[0.00124026, 0.00169098, 0.00166837, 0.00203094, 0.00203094,\n",
              "         0.08293302],\n",
              "        [0.00278764, 0.00301211, 0.00260129, 0.00265571, 0.00265571,\n",
              "         0.10602611],\n",
              "        [0.0025661 , 0.00235405, 0.00191011, 0.0022145 , 0.0022145 ,\n",
              "         0.12375455],\n",
              "        ...,\n",
              "        [0.00764796, 0.00850489, 0.0080286 , 0.00900617, 0.00900617,\n",
              "         0.15450804],\n",
              "        [0.0033398 , 0.00324535, 0.00247702, 0.00293358, 0.00293358,\n",
              "         0.34687416],\n",
              "        [0.00223548, 0.00253897, 0.00191522, 0.00280222, 0.00280222,\n",
              "         0.13678807]],\n",
              "\n",
              "       [[0.00278764, 0.00301211, 0.00260129, 0.00265571, 0.00265571,\n",
              "         0.10602611],\n",
              "        [0.0025661 , 0.00235405, 0.00191011, 0.0022145 , 0.0022145 ,\n",
              "         0.12375455],\n",
              "        [0.00432831, 0.00442321, 0.00400238, 0.00395746, 0.00395746,\n",
              "         0.20754924],\n",
              "        ...,\n",
              "        [0.0033398 , 0.00324535, 0.00247702, 0.00293358, 0.00293358,\n",
              "         0.34687416],\n",
              "        [0.00223548, 0.00253897, 0.00191522, 0.00280222, 0.00280222,\n",
              "         0.13678807],\n",
              "        [0.00226401, 0.00348525, 0.00255874, 0.00410397, 0.00410397,\n",
              "         0.12399701]],\n",
              "\n",
              "       [[0.0025661 , 0.00235405, 0.00191011, 0.0022145 , 0.0022145 ,\n",
              "         0.12375455],\n",
              "        [0.00432831, 0.00442321, 0.00400238, 0.00395746, 0.00395746,\n",
              "         0.20754924],\n",
              "        [0.00351937, 0.00340362, 0.00337079, 0.00365434, 0.00365434,\n",
              "         0.08656654],\n",
              "        ...,\n",
              "        [0.00223548, 0.00253897, 0.00191522, 0.00280222, 0.00280222,\n",
              "         0.13678807],\n",
              "        [0.00226401, 0.00348525, 0.00255874, 0.00410397, 0.00410397,\n",
              "         0.12399701],\n",
              "        [0.0032391 , 0.00472142, 0.00360572, 0.00519691, 0.00519691,\n",
              "         0.10425598]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[0.45839942, 0.45815277, 0.45641813, 0.46172631, 0.46172631,\n",
              "         0.12753343],\n",
              "        [0.47274878, 0.48751588, 0.47802179, 0.48888123, 0.48888123,\n",
              "         0.14878427],\n",
              "        [0.494298  , 0.49203904, 0.48438033, 0.48403124, 0.48403124,\n",
              "         0.13987326],\n",
              "        ...,\n",
              "        [0.43813407, 0.45897744, 0.44426285, 0.46349453, 0.46349453,\n",
              "         0.14015189],\n",
              "        [0.4658762 , 0.46562476, 0.45169391, 0.44725207, 0.44725207,\n",
              "         0.13674388],\n",
              "        [0.45570575, 0.46225111, 0.44582056, 0.44995495, 0.44995495,\n",
              "         0.12975548]],\n",
              "\n",
              "       [[0.47274878, 0.48751588, 0.47802179, 0.48888123, 0.48888123,\n",
              "         0.14878427],\n",
              "        [0.494298  , 0.49203904, 0.48438033, 0.48403124, 0.48403124,\n",
              "         0.13987326],\n",
              "        [0.48327167, 0.48196812, 0.47102488, 0.47660468, 0.47660468,\n",
              "         0.14406449],\n",
              "        ...,\n",
              "        [0.4658762 , 0.46562476, 0.45169391, 0.44725207, 0.44725207,\n",
              "         0.13674388],\n",
              "        [0.45570575, 0.46225111, 0.44582056, 0.44995495, 0.44995495,\n",
              "         0.12975548],\n",
              "        [0.44661781, 0.44488315, 0.44199012, 0.44538283, 0.44538283,\n",
              "         0.09823957]],\n",
              "\n",
              "       [[0.494298  , 0.49203904, 0.48438033, 0.48403124, 0.48403124,\n",
              "         0.13987326],\n",
              "        [0.48327167, 0.48196812, 0.47102488, 0.47660468, 0.47660468,\n",
              "         0.14406449],\n",
              "        [0.43425724, 0.44835674, 0.43907899, 0.44662056, 0.44662056,\n",
              "         0.17192529],\n",
              "        ...,\n",
              "        [0.45570575, 0.46225111, 0.44582056, 0.44995495, 0.44995495,\n",
              "         0.12975548],\n",
              "        [0.44661781, 0.44488315, 0.44199012, 0.44538283, 0.44538283,\n",
              "         0.09823957],\n",
              "        [0.45359111, 0.45745305, 0.44911476, 0.44891927, 0.44891927,\n",
              "         0.10337046]]])"
            ]
          },
          "metadata": {},
          "execution_count": 136
        }
      ],
      "source": [
        "x_train\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 137,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "9eq5ut6RZJjH",
        "outputId": "644cbd1e-9dc5-4858-ffe7-b2e6b35733a9"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.00226401, 0.00348525, 0.00255874, 0.00410397, 0.00410397,\n",
              "        0.12399701],\n",
              "       [0.0032391 , 0.00472142, 0.00360572, 0.00519691, 0.00519691,\n",
              "        0.10425598],\n",
              "       [0.00493417, 0.00527453, 0.0043667 , 0.00508744, 0.00508744,\n",
              "        0.12238456],\n",
              "       ...,\n",
              "       [0.44661781, 0.44488315, 0.44199012, 0.44538283, 0.44538283,\n",
              "        0.09823957],\n",
              "       [0.45359111, 0.45745305, 0.44911476, 0.44891927, 0.44891927,\n",
              "        0.10337046],\n",
              "       [0.44749893, 0.44485817, 0.43759788, 0.44230106, 0.44230106,\n",
              "        0.07828004]])"
            ]
          },
          "metadata": {},
          "execution_count": 137
        }
      ],
      "source": [
        "y_train"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 138,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "9bx7nT79CXzM",
        "outputId": "64fc6376-9e46-49f5-f9cd-b093f94400c3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_3\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " lstm_12 (LSTM)              (924, 20, 50)             11400     \n",
            "                                                                 \n",
            " dropout_12 (Dropout)        (924, 20, 50)             0         \n",
            "                                                                 \n",
            " lstm_13 (LSTM)              (924, 20, 50)             20200     \n",
            "                                                                 \n",
            " dropout_13 (Dropout)        (924, 20, 50)             0         \n",
            "                                                                 \n",
            " lstm_14 (LSTM)              (924, 20, 50)             20200     \n",
            "                                                                 \n",
            " dropout_14 (Dropout)        (924, 20, 50)             0         \n",
            "                                                                 \n",
            " lstm_15 (LSTM)              (924, 50)                 20200     \n",
            "                                                                 \n",
            " dropout_15 (Dropout)        (924, 50)                 0         \n",
            "                                                                 \n",
            " dense_3 (Dense)             (924, 6)                  306       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 72306 (282.45 KB)\n",
            "Trainable params: 72306 (282.45 KB)\n",
            "Non-trainable params: 0 (0.00 Byte)\n",
            "_________________________________________________________________\n"
          ]
        }
      ],
      "source": [
        "from keras.models import Sequential\n",
        "from keras.layers import Dense, Dropout, LSTM, Bidirectional, Input\n",
        "\n",
        "input_shape = (x_train.shape[0],x_train.shape[1], x_train.shape[2])\n",
        "\n",
        "model = Sequential()\n",
        "\n",
        "#model.add(Bidirectional(LSTM(128, return_sequences=True)))\n",
        "\n",
        "#model.add(Bidirectional(LSTM(64, return_sequences=False, dropout=0.5)))\n",
        "\n",
        "#model.add(Dense(20, activation='softmax'))\n",
        "\n",
        "#model.add(Dense(1))\n",
        "\n",
        "model.add(LSTM(units = 50, return_sequences = True))\n",
        "model.add(Dropout(0.2))\n",
        "\n",
        "# Adding a second LSTM layer and some Dropout regularisation\n",
        "model.add(LSTM(units = 50, return_sequences = True))\n",
        "model.add(Dropout(0.2))\n",
        "\n",
        "# Adding a third LSTM layer and some Dropout regularisation\n",
        "model.add(LSTM(units = 50, return_sequences = True))\n",
        "model.add(Dropout(0.2))\n",
        "\n",
        "# Adding a fourth LSTM layer and some Dropout regularisation\n",
        "model.add(LSTM(units = 50))\n",
        "model.add(Dropout(0.2))\n",
        "\n",
        "# Adding the output layer\n",
        "model.add(Dense(units = 6))\n",
        "model.build(input_shape)\n",
        "\n",
        "model.summary()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 139,
      "metadata": {
        "id": "RA1AlqRL73M_"
      },
      "outputs": [],
      "source": [
        "from keras.optimizers import Adam\n",
        "\n",
        "Adam_op=Adam(learning_rate = 0.001, beta_1 = 0.8, beta_2 = 0.99, amsgrad = False)\n",
        "\n",
        "model.compile(loss='mean_squared_error',optimizer=Adam_op, metrics=['mean_absolute_error'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 140,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "OQdUSCvHNKbT",
        "outputId": "7dca49d1-d796-4de0-f768-4b85b0b86500"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/200\n",
            "15/15 [==============================] - 14s 214ms/step - loss: 0.0823 - mean_absolute_error: 0.2085 - val_loss: 0.0059 - val_mean_absolute_error: 0.0586\n",
            "Epoch 2/200\n",
            "15/15 [==============================] - 2s 108ms/step - loss: 0.0162 - mean_absolute_error: 0.0927 - val_loss: 0.0032 - val_mean_absolute_error: 0.0431\n",
            "Epoch 3/200\n",
            "15/15 [==============================] - 2s 120ms/step - loss: 0.0127 - mean_absolute_error: 0.0808 - val_loss: 0.0041 - val_mean_absolute_error: 0.0508\n",
            "Epoch 4/200\n",
            "15/15 [==============================] - 1s 70ms/step - loss: 0.0115 - mean_absolute_error: 0.0783 - val_loss: 0.0031 - val_mean_absolute_error: 0.0436\n",
            "Epoch 5/200\n",
            "15/15 [==============================] - 1s 71ms/step - loss: 0.0122 - mean_absolute_error: 0.0792 - val_loss: 0.0032 - val_mean_absolute_error: 0.0437\n",
            "Epoch 6/200\n",
            "15/15 [==============================] - 1s 71ms/step - loss: 0.0107 - mean_absolute_error: 0.0745 - val_loss: 0.0029 - val_mean_absolute_error: 0.0421\n",
            "Epoch 7/200\n",
            "15/15 [==============================] - 1s 68ms/step - loss: 0.0107 - mean_absolute_error: 0.0746 - val_loss: 0.0027 - val_mean_absolute_error: 0.0405\n",
            "Epoch 8/200\n",
            "15/15 [==============================] - 1s 72ms/step - loss: 0.0103 - mean_absolute_error: 0.0726 - val_loss: 0.0035 - val_mean_absolute_error: 0.0468\n",
            "Epoch 9/200\n",
            "15/15 [==============================] - 1s 70ms/step - loss: 0.0091 - mean_absolute_error: 0.0686 - val_loss: 0.0026 - val_mean_absolute_error: 0.0395\n",
            "Epoch 10/200\n",
            "15/15 [==============================] - 1s 68ms/step - loss: 0.0085 - mean_absolute_error: 0.0660 - val_loss: 0.0049 - val_mean_absolute_error: 0.0557\n",
            "Epoch 11/200\n",
            "15/15 [==============================] - 1s 72ms/step - loss: 0.0094 - mean_absolute_error: 0.0684 - val_loss: 0.0028 - val_mean_absolute_error: 0.0414\n",
            "Epoch 12/200\n",
            "15/15 [==============================] - 1s 71ms/step - loss: 0.0086 - mean_absolute_error: 0.0655 - val_loss: 0.0027 - val_mean_absolute_error: 0.0400\n",
            "Epoch 13/200\n",
            "15/15 [==============================] - 1s 83ms/step - loss: 0.0086 - mean_absolute_error: 0.0659 - val_loss: 0.0026 - val_mean_absolute_error: 0.0406\n",
            "Epoch 14/200\n",
            "15/15 [==============================] - 2s 104ms/step - loss: 0.0083 - mean_absolute_error: 0.0645 - val_loss: 0.0022 - val_mean_absolute_error: 0.0361\n",
            "Epoch 15/200\n",
            "15/15 [==============================] - 2s 109ms/step - loss: 0.0071 - mean_absolute_error: 0.0600 - val_loss: 0.0031 - val_mean_absolute_error: 0.0441\n",
            "Epoch 16/200\n",
            "15/15 [==============================] - 1s 69ms/step - loss: 0.0073 - mean_absolute_error: 0.0604 - val_loss: 0.0027 - val_mean_absolute_error: 0.0414\n",
            "Epoch 17/200\n",
            "15/15 [==============================] - 1s 63ms/step - loss: 0.0072 - mean_absolute_error: 0.0600 - val_loss: 0.0032 - val_mean_absolute_error: 0.0452\n",
            "Epoch 18/200\n",
            "15/15 [==============================] - 1s 67ms/step - loss: 0.0070 - mean_absolute_error: 0.0592 - val_loss: 0.0022 - val_mean_absolute_error: 0.0370\n",
            "Epoch 19/200\n",
            "15/15 [==============================] - 1s 64ms/step - loss: 0.0072 - mean_absolute_error: 0.0599 - val_loss: 0.0018 - val_mean_absolute_error: 0.0326\n",
            "Epoch 20/200\n",
            "15/15 [==============================] - 1s 62ms/step - loss: 0.0066 - mean_absolute_error: 0.0570 - val_loss: 0.0017 - val_mean_absolute_error: 0.0325\n",
            "Epoch 21/200\n",
            "15/15 [==============================] - 1s 63ms/step - loss: 0.0066 - mean_absolute_error: 0.0575 - val_loss: 0.0035 - val_mean_absolute_error: 0.0483\n",
            "Epoch 22/200\n",
            "15/15 [==============================] - 1s 65ms/step - loss: 0.0060 - mean_absolute_error: 0.0546 - val_loss: 0.0017 - val_mean_absolute_error: 0.0322\n",
            "Epoch 23/200\n",
            "15/15 [==============================] - 1s 69ms/step - loss: 0.0068 - mean_absolute_error: 0.0580 - val_loss: 0.0063 - val_mean_absolute_error: 0.0674\n",
            "Epoch 24/200\n",
            "15/15 [==============================] - 1s 69ms/step - loss: 0.0062 - mean_absolute_error: 0.0551 - val_loss: 0.0019 - val_mean_absolute_error: 0.0340\n",
            "Epoch 25/200\n",
            "15/15 [==============================] - 1s 69ms/step - loss: 0.0065 - mean_absolute_error: 0.0563 - val_loss: 0.0023 - val_mean_absolute_error: 0.0383\n",
            "Epoch 26/200\n",
            "15/15 [==============================] - 1s 100ms/step - loss: 0.0058 - mean_absolute_error: 0.0543 - val_loss: 0.0017 - val_mean_absolute_error: 0.0324\n",
            "Epoch 27/200\n",
            "15/15 [==============================] - 2s 114ms/step - loss: 0.0057 - mean_absolute_error: 0.0537 - val_loss: 0.0013 - val_mean_absolute_error: 0.0288\n",
            "Epoch 28/200\n",
            "15/15 [==============================] - 1s 82ms/step - loss: 0.0049 - mean_absolute_error: 0.0494 - val_loss: 0.0014 - val_mean_absolute_error: 0.0298\n",
            "Epoch 29/200\n",
            "15/15 [==============================] - 1s 76ms/step - loss: 0.0051 - mean_absolute_error: 0.0503 - val_loss: 0.0026 - val_mean_absolute_error: 0.0419\n",
            "Epoch 30/200\n",
            "15/15 [==============================] - 1s 73ms/step - loss: 0.0061 - mean_absolute_error: 0.0557 - val_loss: 0.0014 - val_mean_absolute_error: 0.0292\n",
            "Epoch 31/200\n",
            "15/15 [==============================] - 1s 77ms/step - loss: 0.0052 - mean_absolute_error: 0.0504 - val_loss: 0.0015 - val_mean_absolute_error: 0.0306\n",
            "Epoch 32/200\n",
            "15/15 [==============================] - 1s 73ms/step - loss: 0.0048 - mean_absolute_error: 0.0485 - val_loss: 0.0013 - val_mean_absolute_error: 0.0285\n",
            "Epoch 33/200\n",
            "15/15 [==============================] - 1s 69ms/step - loss: 0.0047 - mean_absolute_error: 0.0484 - val_loss: 0.0013 - val_mean_absolute_error: 0.0285\n",
            "Epoch 34/200\n",
            "15/15 [==============================] - 1s 73ms/step - loss: 0.0045 - mean_absolute_error: 0.0466 - val_loss: 0.0012 - val_mean_absolute_error: 0.0278\n",
            "Epoch 35/200\n",
            "15/15 [==============================] - 1s 70ms/step - loss: 0.0045 - mean_absolute_error: 0.0479 - val_loss: 0.0012 - val_mean_absolute_error: 0.0274\n",
            "Epoch 36/200\n",
            "15/15 [==============================] - 1s 69ms/step - loss: 0.0045 - mean_absolute_error: 0.0482 - val_loss: 0.0012 - val_mean_absolute_error: 0.0269\n",
            "Epoch 37/200\n",
            "15/15 [==============================] - 1s 87ms/step - loss: 0.0045 - mean_absolute_error: 0.0468 - val_loss: 0.0012 - val_mean_absolute_error: 0.0274\n",
            "Epoch 38/200\n",
            "15/15 [==============================] - 2s 104ms/step - loss: 0.0044 - mean_absolute_error: 0.0465 - val_loss: 0.0011 - val_mean_absolute_error: 0.0263\n",
            "Epoch 39/200\n",
            "15/15 [==============================] - 2s 104ms/step - loss: 0.0045 - mean_absolute_error: 0.0467 - val_loss: 0.0023 - val_mean_absolute_error: 0.0388\n",
            "Epoch 40/200\n",
            "15/15 [==============================] - 1s 67ms/step - loss: 0.0047 - mean_absolute_error: 0.0482 - val_loss: 0.0011 - val_mean_absolute_error: 0.0265\n",
            "Epoch 41/200\n",
            "15/15 [==============================] - 1s 73ms/step - loss: 0.0042 - mean_absolute_error: 0.0458 - val_loss: 0.0019 - val_mean_absolute_error: 0.0349\n",
            "Epoch 42/200\n",
            "15/15 [==============================] - 1s 72ms/step - loss: 0.0045 - mean_absolute_error: 0.0469 - val_loss: 0.0013 - val_mean_absolute_error: 0.0281\n",
            "Epoch 43/200\n",
            "15/15 [==============================] - 1s 70ms/step - loss: 0.0043 - mean_absolute_error: 0.0456 - val_loss: 0.0019 - val_mean_absolute_error: 0.0353\n",
            "Epoch 44/200\n",
            "15/15 [==============================] - 1s 71ms/step - loss: 0.0043 - mean_absolute_error: 0.0463 - val_loss: 0.0012 - val_mean_absolute_error: 0.0277\n",
            "Epoch 45/200\n",
            "15/15 [==============================] - 1s 73ms/step - loss: 0.0039 - mean_absolute_error: 0.0433 - val_loss: 0.0014 - val_mean_absolute_error: 0.0302\n",
            "Epoch 46/200\n",
            "15/15 [==============================] - 1s 72ms/step - loss: 0.0039 - mean_absolute_error: 0.0440 - val_loss: 9.6388e-04 - val_mean_absolute_error: 0.0241\n",
            "Epoch 47/200\n",
            "15/15 [==============================] - 1s 72ms/step - loss: 0.0037 - mean_absolute_error: 0.0422 - val_loss: 0.0014 - val_mean_absolute_error: 0.0293\n",
            "Epoch 48/200\n",
            "15/15 [==============================] - 1s 70ms/step - loss: 0.0038 - mean_absolute_error: 0.0430 - val_loss: 0.0017 - val_mean_absolute_error: 0.0337\n",
            "Epoch 49/200\n",
            "15/15 [==============================] - 1s 90ms/step - loss: 0.0039 - mean_absolute_error: 0.0440 - val_loss: 0.0011 - val_mean_absolute_error: 0.0257\n",
            "Epoch 50/200\n",
            "15/15 [==============================] - 2s 106ms/step - loss: 0.0038 - mean_absolute_error: 0.0431 - val_loss: 0.0013 - val_mean_absolute_error: 0.0291\n",
            "Epoch 51/200\n",
            "15/15 [==============================] - 2s 103ms/step - loss: 0.0039 - mean_absolute_error: 0.0434 - val_loss: 0.0026 - val_mean_absolute_error: 0.0426\n",
            "Epoch 52/200\n",
            "15/15 [==============================] - 1s 69ms/step - loss: 0.0036 - mean_absolute_error: 0.0423 - val_loss: 0.0012 - val_mean_absolute_error: 0.0274\n",
            "Epoch 53/200\n",
            "15/15 [==============================] - 1s 70ms/step - loss: 0.0036 - mean_absolute_error: 0.0423 - val_loss: 9.2475e-04 - val_mean_absolute_error: 0.0236\n",
            "Epoch 54/200\n",
            "15/15 [==============================] - 1s 69ms/step - loss: 0.0037 - mean_absolute_error: 0.0425 - val_loss: 0.0011 - val_mean_absolute_error: 0.0259\n",
            "Epoch 55/200\n",
            "15/15 [==============================] - 1s 67ms/step - loss: 0.0033 - mean_absolute_error: 0.0406 - val_loss: 9.4754e-04 - val_mean_absolute_error: 0.0241\n",
            "Epoch 56/200\n",
            "15/15 [==============================] - 1s 70ms/step - loss: 0.0034 - mean_absolute_error: 0.0413 - val_loss: 8.8254e-04 - val_mean_absolute_error: 0.0228\n",
            "Epoch 57/200\n",
            "15/15 [==============================] - 1s 65ms/step - loss: 0.0035 - mean_absolute_error: 0.0414 - val_loss: 0.0013 - val_mean_absolute_error: 0.0281\n",
            "Epoch 58/200\n",
            "15/15 [==============================] - 1s 69ms/step - loss: 0.0033 - mean_absolute_error: 0.0403 - val_loss: 8.4256e-04 - val_mean_absolute_error: 0.0224\n",
            "Epoch 59/200\n",
            "15/15 [==============================] - 1s 70ms/step - loss: 0.0033 - mean_absolute_error: 0.0402 - val_loss: 0.0014 - val_mean_absolute_error: 0.0298\n",
            "Epoch 60/200\n",
            "15/15 [==============================] - 1s 70ms/step - loss: 0.0031 - mean_absolute_error: 0.0388 - val_loss: 0.0013 - val_mean_absolute_error: 0.0287\n",
            "Epoch 61/200\n",
            "15/15 [==============================] - 1s 77ms/step - loss: 0.0033 - mean_absolute_error: 0.0405 - val_loss: 9.4744e-04 - val_mean_absolute_error: 0.0240\n",
            "Epoch 62/200\n",
            "15/15 [==============================] - 2s 104ms/step - loss: 0.0031 - mean_absolute_error: 0.0386 - val_loss: 0.0011 - val_mean_absolute_error: 0.0254\n",
            "Epoch 63/200\n",
            "15/15 [==============================] - 2s 117ms/step - loss: 0.0038 - mean_absolute_error: 0.0429 - val_loss: 0.0013 - val_mean_absolute_error: 0.0289\n",
            "Epoch 64/200\n",
            "15/15 [==============================] - 1s 78ms/step - loss: 0.0035 - mean_absolute_error: 0.0411 - val_loss: 9.5927e-04 - val_mean_absolute_error: 0.0244\n",
            "Epoch 65/200\n",
            "15/15 [==============================] - 1s 73ms/step - loss: 0.0031 - mean_absolute_error: 0.0391 - val_loss: 8.4619e-04 - val_mean_absolute_error: 0.0226\n",
            "Epoch 66/200\n",
            "15/15 [==============================] - 1s 69ms/step - loss: 0.0032 - mean_absolute_error: 0.0398 - val_loss: 8.8965e-04 - val_mean_absolute_error: 0.0230\n",
            "Epoch 67/200\n",
            "15/15 [==============================] - 1s 70ms/step - loss: 0.0032 - mean_absolute_error: 0.0400 - val_loss: 8.3715e-04 - val_mean_absolute_error: 0.0221\n",
            "Epoch 68/200\n",
            "15/15 [==============================] - 1s 72ms/step - loss: 0.0030 - mean_absolute_error: 0.0387 - val_loss: 8.6619e-04 - val_mean_absolute_error: 0.0230\n",
            "Epoch 69/200\n",
            "15/15 [==============================] - 1s 70ms/step - loss: 0.0031 - mean_absolute_error: 0.0393 - val_loss: 8.1663e-04 - val_mean_absolute_error: 0.0219\n",
            "Epoch 70/200\n",
            "15/15 [==============================] - 1s 68ms/step - loss: 0.0032 - mean_absolute_error: 0.0400 - val_loss: 0.0012 - val_mean_absolute_error: 0.0276\n",
            "Epoch 71/200\n",
            "15/15 [==============================] - 1s 70ms/step - loss: 0.0032 - mean_absolute_error: 0.0396 - val_loss: 0.0012 - val_mean_absolute_error: 0.0278\n",
            "Epoch 72/200\n",
            "15/15 [==============================] - 1s 67ms/step - loss: 0.0030 - mean_absolute_error: 0.0385 - val_loss: 8.3415e-04 - val_mean_absolute_error: 0.0222\n",
            "Epoch 73/200\n",
            "15/15 [==============================] - 1s 80ms/step - loss: 0.0028 - mean_absolute_error: 0.0371 - val_loss: 8.3694e-04 - val_mean_absolute_error: 0.0224\n",
            "Epoch 74/200\n",
            "15/15 [==============================] - 2s 108ms/step - loss: 0.0030 - mean_absolute_error: 0.0378 - val_loss: 0.0018 - val_mean_absolute_error: 0.0348\n",
            "Epoch 75/200\n",
            "15/15 [==============================] - 2s 117ms/step - loss: 0.0030 - mean_absolute_error: 0.0394 - val_loss: 0.0011 - val_mean_absolute_error: 0.0266\n",
            "Epoch 76/200\n",
            "15/15 [==============================] - 1s 72ms/step - loss: 0.0031 - mean_absolute_error: 0.0394 - val_loss: 9.4821e-04 - val_mean_absolute_error: 0.0245\n",
            "Epoch 77/200\n",
            "15/15 [==============================] - 1s 74ms/step - loss: 0.0028 - mean_absolute_error: 0.0367 - val_loss: 7.4857e-04 - val_mean_absolute_error: 0.0210\n",
            "Epoch 78/200\n",
            "15/15 [==============================] - 1s 71ms/step - loss: 0.0030 - mean_absolute_error: 0.0380 - val_loss: 9.7298e-04 - val_mean_absolute_error: 0.0245\n",
            "Epoch 79/200\n",
            "15/15 [==============================] - 1s 75ms/step - loss: 0.0029 - mean_absolute_error: 0.0373 - val_loss: 8.3992e-04 - val_mean_absolute_error: 0.0224\n",
            "Epoch 80/200\n",
            "15/15 [==============================] - 1s 77ms/step - loss: 0.0027 - mean_absolute_error: 0.0372 - val_loss: 0.0011 - val_mean_absolute_error: 0.0270\n",
            "Epoch 81/200\n",
            "15/15 [==============================] - 1s 73ms/step - loss: 0.0027 - mean_absolute_error: 0.0370 - val_loss: 8.0127e-04 - val_mean_absolute_error: 0.0219\n",
            "Epoch 82/200\n",
            "15/15 [==============================] - 1s 72ms/step - loss: 0.0026 - mean_absolute_error: 0.0358 - val_loss: 7.1945e-04 - val_mean_absolute_error: 0.0205\n",
            "Epoch 83/200\n",
            "15/15 [==============================] - 1s 75ms/step - loss: 0.0027 - mean_absolute_error: 0.0369 - val_loss: 7.1889e-04 - val_mean_absolute_error: 0.0206\n",
            "Epoch 84/200\n",
            "15/15 [==============================] - 1s 71ms/step - loss: 0.0027 - mean_absolute_error: 0.0364 - val_loss: 7.9834e-04 - val_mean_absolute_error: 0.0219\n",
            "Epoch 85/200\n",
            "15/15 [==============================] - 2s 105ms/step - loss: 0.0028 - mean_absolute_error: 0.0367 - val_loss: 0.0012 - val_mean_absolute_error: 0.0278\n",
            "Epoch 86/200\n",
            "15/15 [==============================] - 2s 112ms/step - loss: 0.0028 - mean_absolute_error: 0.0368 - val_loss: 7.6450e-04 - val_mean_absolute_error: 0.0213\n",
            "Epoch 87/200\n",
            "15/15 [==============================] - 1s 86ms/step - loss: 0.0027 - mean_absolute_error: 0.0355 - val_loss: 0.0019 - val_mean_absolute_error: 0.0376\n",
            "Epoch 88/200\n",
            "15/15 [==============================] - 1s 65ms/step - loss: 0.0029 - mean_absolute_error: 0.0383 - val_loss: 6.5386e-04 - val_mean_absolute_error: 0.0193\n",
            "Epoch 89/200\n",
            "15/15 [==============================] - 1s 72ms/step - loss: 0.0027 - mean_absolute_error: 0.0363 - val_loss: 7.8509e-04 - val_mean_absolute_error: 0.0218\n",
            "Epoch 90/200\n",
            "15/15 [==============================] - 1s 70ms/step - loss: 0.0028 - mean_absolute_error: 0.0373 - val_loss: 6.7779e-04 - val_mean_absolute_error: 0.0200\n",
            "Epoch 91/200\n",
            "15/15 [==============================] - 1s 68ms/step - loss: 0.0028 - mean_absolute_error: 0.0361 - val_loss: 0.0010 - val_mean_absolute_error: 0.0257\n",
            "Epoch 92/200\n",
            "15/15 [==============================] - 1s 66ms/step - loss: 0.0025 - mean_absolute_error: 0.0352 - val_loss: 7.4493e-04 - val_mean_absolute_error: 0.0210\n",
            "Epoch 93/200\n",
            "15/15 [==============================] - 1s 68ms/step - loss: 0.0027 - mean_absolute_error: 0.0358 - val_loss: 6.4555e-04 - val_mean_absolute_error: 0.0190\n",
            "Epoch 94/200\n",
            "15/15 [==============================] - 1s 70ms/step - loss: 0.0026 - mean_absolute_error: 0.0355 - val_loss: 6.9712e-04 - val_mean_absolute_error: 0.0203\n",
            "Epoch 95/200\n",
            "15/15 [==============================] - 1s 69ms/step - loss: 0.0025 - mean_absolute_error: 0.0344 - val_loss: 6.4340e-04 - val_mean_absolute_error: 0.0192\n",
            "Epoch 96/200\n",
            "15/15 [==============================] - 1s 66ms/step - loss: 0.0023 - mean_absolute_error: 0.0334 - val_loss: 6.4647e-04 - val_mean_absolute_error: 0.0195\n",
            "Epoch 97/200\n",
            "15/15 [==============================] - 2s 126ms/step - loss: 0.0027 - mean_absolute_error: 0.0363 - val_loss: 7.1299e-04 - val_mean_absolute_error: 0.0202\n",
            "Epoch 98/200\n",
            "15/15 [==============================] - 2s 136ms/step - loss: 0.0026 - mean_absolute_error: 0.0355 - val_loss: 0.0012 - val_mean_absolute_error: 0.0281\n",
            "Epoch 99/200\n",
            "15/15 [==============================] - 2s 153ms/step - loss: 0.0025 - mean_absolute_error: 0.0346 - val_loss: 6.2736e-04 - val_mean_absolute_error: 0.0189\n",
            "Epoch 100/200\n",
            "15/15 [==============================] - 2s 154ms/step - loss: 0.0026 - mean_absolute_error: 0.0354 - val_loss: 6.1692e-04 - val_mean_absolute_error: 0.0189\n",
            "Epoch 101/200\n",
            "15/15 [==============================] - 2s 145ms/step - loss: 0.0025 - mean_absolute_error: 0.0348 - val_loss: 0.0013 - val_mean_absolute_error: 0.0298\n",
            "Epoch 102/200\n",
            "15/15 [==============================] - 2s 116ms/step - loss: 0.0028 - mean_absolute_error: 0.0375 - val_loss: 9.3510e-04 - val_mean_absolute_error: 0.0244\n",
            "Epoch 103/200\n",
            "15/15 [==============================] - 1s 77ms/step - loss: 0.0023 - mean_absolute_error: 0.0333 - val_loss: 7.2229e-04 - val_mean_absolute_error: 0.0207\n",
            "Epoch 104/200\n",
            "15/15 [==============================] - 1s 73ms/step - loss: 0.0024 - mean_absolute_error: 0.0341 - val_loss: 6.7426e-04 - val_mean_absolute_error: 0.0203\n",
            "Epoch 105/200\n",
            "15/15 [==============================] - 1s 74ms/step - loss: 0.0024 - mean_absolute_error: 0.0344 - val_loss: 6.6424e-04 - val_mean_absolute_error: 0.0198\n",
            "Epoch 106/200\n",
            "15/15 [==============================] - 1s 71ms/step - loss: 0.0024 - mean_absolute_error: 0.0339 - val_loss: 8.4738e-04 - val_mean_absolute_error: 0.0231\n",
            "Epoch 107/200\n",
            "15/15 [==============================] - 1s 86ms/step - loss: 0.0025 - mean_absolute_error: 0.0349 - val_loss: 5.8312e-04 - val_mean_absolute_error: 0.0181\n",
            "Epoch 108/200\n",
            "15/15 [==============================] - 2s 108ms/step - loss: 0.0024 - mean_absolute_error: 0.0344 - val_loss: 5.6901e-04 - val_mean_absolute_error: 0.0177\n",
            "Epoch 109/200\n",
            "15/15 [==============================] - 2s 109ms/step - loss: 0.0024 - mean_absolute_error: 0.0333 - val_loss: 5.4897e-04 - val_mean_absolute_error: 0.0176\n",
            "Epoch 110/200\n",
            "15/15 [==============================] - 1s 72ms/step - loss: 0.0024 - mean_absolute_error: 0.0345 - val_loss: 0.0013 - val_mean_absolute_error: 0.0301\n",
            "Epoch 111/200\n",
            "15/15 [==============================] - 1s 75ms/step - loss: 0.0028 - mean_absolute_error: 0.0369 - val_loss: 7.7254e-04 - val_mean_absolute_error: 0.0219\n",
            "Epoch 112/200\n",
            "15/15 [==============================] - 1s 70ms/step - loss: 0.0023 - mean_absolute_error: 0.0330 - val_loss: 6.0557e-04 - val_mean_absolute_error: 0.0182\n",
            "Epoch 113/200\n",
            "15/15 [==============================] - 1s 76ms/step - loss: 0.0024 - mean_absolute_error: 0.0338 - val_loss: 5.5741e-04 - val_mean_absolute_error: 0.0176\n",
            "Epoch 114/200\n",
            "15/15 [==============================] - 1s 70ms/step - loss: 0.0023 - mean_absolute_error: 0.0328 - val_loss: 9.3135e-04 - val_mean_absolute_error: 0.0249\n",
            "Epoch 115/200\n",
            "15/15 [==============================] - 1s 72ms/step - loss: 0.0024 - mean_absolute_error: 0.0334 - val_loss: 5.4745e-04 - val_mean_absolute_error: 0.0177\n",
            "Epoch 116/200\n",
            "15/15 [==============================] - 1s 71ms/step - loss: 0.0023 - mean_absolute_error: 0.0331 - val_loss: 5.9594e-04 - val_mean_absolute_error: 0.0185\n",
            "Epoch 117/200\n",
            "15/15 [==============================] - 1s 72ms/step - loss: 0.0023 - mean_absolute_error: 0.0339 - val_loss: 5.5166e-04 - val_mean_absolute_error: 0.0178\n",
            "Epoch 118/200\n",
            "15/15 [==============================] - 1s 71ms/step - loss: 0.0023 - mean_absolute_error: 0.0327 - val_loss: 7.6522e-04 - val_mean_absolute_error: 0.0217\n",
            "Epoch 119/200\n",
            "15/15 [==============================] - 1s 96ms/step - loss: 0.0023 - mean_absolute_error: 0.0332 - val_loss: 5.7739e-04 - val_mean_absolute_error: 0.0182\n",
            "Epoch 120/200\n",
            "15/15 [==============================] - 2s 106ms/step - loss: 0.0023 - mean_absolute_error: 0.0333 - val_loss: 8.2204e-04 - val_mean_absolute_error: 0.0231\n",
            "Epoch 121/200\n",
            "15/15 [==============================] - 1s 93ms/step - loss: 0.0024 - mean_absolute_error: 0.0331 - val_loss: 6.1269e-04 - val_mean_absolute_error: 0.0190\n",
            "Epoch 122/200\n",
            "15/15 [==============================] - 1s 67ms/step - loss: 0.0022 - mean_absolute_error: 0.0326 - val_loss: 5.4506e-04 - val_mean_absolute_error: 0.0176\n",
            "Epoch 123/200\n",
            "15/15 [==============================] - 1s 71ms/step - loss: 0.0023 - mean_absolute_error: 0.0335 - val_loss: 7.0339e-04 - val_mean_absolute_error: 0.0209\n",
            "Epoch 124/200\n",
            "15/15 [==============================] - 1s 72ms/step - loss: 0.0022 - mean_absolute_error: 0.0326 - val_loss: 5.1790e-04 - val_mean_absolute_error: 0.0170\n",
            "Epoch 125/200\n",
            "15/15 [==============================] - 1s 77ms/step - loss: 0.0023 - mean_absolute_error: 0.0328 - val_loss: 5.4076e-04 - val_mean_absolute_error: 0.0174\n",
            "Epoch 126/200\n",
            "15/15 [==============================] - 1s 68ms/step - loss: 0.0023 - mean_absolute_error: 0.0331 - val_loss: 5.9496e-04 - val_mean_absolute_error: 0.0186\n",
            "Epoch 127/200\n",
            "15/15 [==============================] - 1s 68ms/step - loss: 0.0022 - mean_absolute_error: 0.0332 - val_loss: 5.3716e-04 - val_mean_absolute_error: 0.0174\n",
            "Epoch 128/200\n",
            "15/15 [==============================] - 1s 70ms/step - loss: 0.0022 - mean_absolute_error: 0.0320 - val_loss: 5.2160e-04 - val_mean_absolute_error: 0.0170\n",
            "Epoch 129/200\n",
            "15/15 [==============================] - 1s 76ms/step - loss: 0.0023 - mean_absolute_error: 0.0328 - val_loss: 6.3114e-04 - val_mean_absolute_error: 0.0195\n",
            "Epoch 130/200\n",
            "15/15 [==============================] - 1s 75ms/step - loss: 0.0021 - mean_absolute_error: 0.0314 - val_loss: 4.9411e-04 - val_mean_absolute_error: 0.0166\n",
            "Epoch 131/200\n",
            "15/15 [==============================] - 2s 112ms/step - loss: 0.0022 - mean_absolute_error: 0.0325 - val_loss: 8.4652e-04 - val_mean_absolute_error: 0.0237\n",
            "Epoch 132/200\n",
            "15/15 [==============================] - 2s 125ms/step - loss: 0.0024 - mean_absolute_error: 0.0339 - val_loss: 5.4355e-04 - val_mean_absolute_error: 0.0180\n",
            "Epoch 133/200\n",
            "15/15 [==============================] - 1s 75ms/step - loss: 0.0021 - mean_absolute_error: 0.0317 - val_loss: 5.1605e-04 - val_mean_absolute_error: 0.0171\n",
            "Epoch 134/200\n",
            "15/15 [==============================] - 1s 76ms/step - loss: 0.0022 - mean_absolute_error: 0.0321 - val_loss: 9.1587e-04 - val_mean_absolute_error: 0.0250\n",
            "Epoch 135/200\n",
            "15/15 [==============================] - 1s 71ms/step - loss: 0.0021 - mean_absolute_error: 0.0312 - val_loss: 5.1633e-04 - val_mean_absolute_error: 0.0175\n",
            "Epoch 136/200\n",
            "15/15 [==============================] - 1s 77ms/step - loss: 0.0024 - mean_absolute_error: 0.0347 - val_loss: 6.2975e-04 - val_mean_absolute_error: 0.0194\n",
            "Epoch 137/200\n",
            "15/15 [==============================] - 1s 73ms/step - loss: 0.0022 - mean_absolute_error: 0.0316 - val_loss: 5.0465e-04 - val_mean_absolute_error: 0.0167\n",
            "Epoch 138/200\n",
            "15/15 [==============================] - 1s 73ms/step - loss: 0.0021 - mean_absolute_error: 0.0319 - val_loss: 5.0910e-04 - val_mean_absolute_error: 0.0168\n",
            "Epoch 139/200\n",
            "15/15 [==============================] - 1s 73ms/step - loss: 0.0022 - mean_absolute_error: 0.0322 - val_loss: 4.9100e-04 - val_mean_absolute_error: 0.0168\n",
            "Epoch 140/200\n",
            "15/15 [==============================] - 1s 78ms/step - loss: 0.0021 - mean_absolute_error: 0.0317 - val_loss: 4.4884e-04 - val_mean_absolute_error: 0.0160\n",
            "Epoch 141/200\n",
            "15/15 [==============================] - 1s 77ms/step - loss: 0.0022 - mean_absolute_error: 0.0320 - val_loss: 5.1162e-04 - val_mean_absolute_error: 0.0175\n",
            "Epoch 142/200\n",
            "15/15 [==============================] - 2s 105ms/step - loss: 0.0022 - mean_absolute_error: 0.0330 - val_loss: 4.5657e-04 - val_mean_absolute_error: 0.0158\n",
            "Epoch 143/200\n",
            "15/15 [==============================] - 2s 106ms/step - loss: 0.0021 - mean_absolute_error: 0.0308 - val_loss: 4.5717e-04 - val_mean_absolute_error: 0.0159\n",
            "Epoch 144/200\n",
            "15/15 [==============================] - 1s 96ms/step - loss: 0.0021 - mean_absolute_error: 0.0313 - val_loss: 6.6421e-04 - val_mean_absolute_error: 0.0206\n",
            "Epoch 145/200\n",
            "15/15 [==============================] - 1s 78ms/step - loss: 0.0021 - mean_absolute_error: 0.0310 - val_loss: 4.3413e-04 - val_mean_absolute_error: 0.0155\n",
            "Epoch 146/200\n",
            "15/15 [==============================] - 1s 71ms/step - loss: 0.0020 - mean_absolute_error: 0.0307 - val_loss: 4.6931e-04 - val_mean_absolute_error: 0.0161\n",
            "Epoch 147/200\n",
            "15/15 [==============================] - 1s 74ms/step - loss: 0.0020 - mean_absolute_error: 0.0307 - val_loss: 5.5260e-04 - val_mean_absolute_error: 0.0181\n",
            "Epoch 148/200\n",
            "15/15 [==============================] - 1s 72ms/step - loss: 0.0020 - mean_absolute_error: 0.0305 - val_loss: 4.1813e-04 - val_mean_absolute_error: 0.0151\n",
            "Epoch 149/200\n",
            "15/15 [==============================] - 1s 75ms/step - loss: 0.0020 - mean_absolute_error: 0.0295 - val_loss: 4.6143e-04 - val_mean_absolute_error: 0.0159\n",
            "Epoch 150/200\n",
            "15/15 [==============================] - 1s 70ms/step - loss: 0.0020 - mean_absolute_error: 0.0304 - val_loss: 4.8730e-04 - val_mean_absolute_error: 0.0167\n",
            "Epoch 151/200\n",
            "15/15 [==============================] - 1s 71ms/step - loss: 0.0021 - mean_absolute_error: 0.0307 - val_loss: 4.5343e-04 - val_mean_absolute_error: 0.0160\n",
            "Epoch 152/200\n",
            "15/15 [==============================] - 1s 75ms/step - loss: 0.0019 - mean_absolute_error: 0.0298 - val_loss: 4.9424e-04 - val_mean_absolute_error: 0.0169\n",
            "Epoch 153/200\n",
            "15/15 [==============================] - 1s 84ms/step - loss: 0.0021 - mean_absolute_error: 0.0312 - val_loss: 4.4936e-04 - val_mean_absolute_error: 0.0156\n",
            "Epoch 154/200\n",
            "15/15 [==============================] - 2s 109ms/step - loss: 0.0020 - mean_absolute_error: 0.0302 - val_loss: 9.2689e-04 - val_mean_absolute_error: 0.0251\n",
            "Epoch 155/200\n",
            "15/15 [==============================] - 2s 113ms/step - loss: 0.0024 - mean_absolute_error: 0.0341 - val_loss: 4.1430e-04 - val_mean_absolute_error: 0.0150\n",
            "Epoch 156/200\n",
            "15/15 [==============================] - 1s 86ms/step - loss: 0.0021 - mean_absolute_error: 0.0311 - val_loss: 4.6304e-04 - val_mean_absolute_error: 0.0161\n",
            "Epoch 157/200\n",
            "15/15 [==============================] - 1s 74ms/step - loss: 0.0021 - mean_absolute_error: 0.0314 - val_loss: 4.1604e-04 - val_mean_absolute_error: 0.0149\n",
            "Epoch 158/200\n",
            "15/15 [==============================] - 1s 72ms/step - loss: 0.0020 - mean_absolute_error: 0.0306 - val_loss: 5.1506e-04 - val_mean_absolute_error: 0.0170\n",
            "Epoch 159/200\n",
            "15/15 [==============================] - 1s 75ms/step - loss: 0.0020 - mean_absolute_error: 0.0302 - val_loss: 4.3916e-04 - val_mean_absolute_error: 0.0153\n",
            "Epoch 160/200\n",
            "15/15 [==============================] - 1s 72ms/step - loss: 0.0020 - mean_absolute_error: 0.0299 - val_loss: 6.2751e-04 - val_mean_absolute_error: 0.0200\n",
            "Epoch 161/200\n",
            "15/15 [==============================] - 1s 73ms/step - loss: 0.0021 - mean_absolute_error: 0.0319 - val_loss: 4.8734e-04 - val_mean_absolute_error: 0.0168\n",
            "Epoch 162/200\n",
            "15/15 [==============================] - 1s 70ms/step - loss: 0.0020 - mean_absolute_error: 0.0305 - val_loss: 4.7879e-04 - val_mean_absolute_error: 0.0166\n",
            "Epoch 163/200\n",
            "15/15 [==============================] - 1s 76ms/step - loss: 0.0020 - mean_absolute_error: 0.0299 - val_loss: 4.2526e-04 - val_mean_absolute_error: 0.0150\n",
            "Epoch 164/200\n",
            "15/15 [==============================] - 1s 78ms/step - loss: 0.0022 - mean_absolute_error: 0.0320 - val_loss: 4.2765e-04 - val_mean_absolute_error: 0.0157\n",
            "Epoch 165/200\n",
            "15/15 [==============================] - 1s 98ms/step - loss: 0.0020 - mean_absolute_error: 0.0305 - val_loss: 5.2943e-04 - val_mean_absolute_error: 0.0175\n",
            "Epoch 166/200\n",
            "15/15 [==============================] - 1s 100ms/step - loss: 0.0020 - mean_absolute_error: 0.0301 - val_loss: 7.7383e-04 - val_mean_absolute_error: 0.0229\n",
            "Epoch 167/200\n",
            "15/15 [==============================] - 2s 109ms/step - loss: 0.0020 - mean_absolute_error: 0.0302 - val_loss: 4.8994e-04 - val_mean_absolute_error: 0.0168\n",
            "Epoch 168/200\n",
            "15/15 [==============================] - 1s 66ms/step - loss: 0.0020 - mean_absolute_error: 0.0301 - val_loss: 5.8236e-04 - val_mean_absolute_error: 0.0192\n",
            "Epoch 169/200\n",
            "15/15 [==============================] - 1s 75ms/step - loss: 0.0020 - mean_absolute_error: 0.0296 - val_loss: 4.6374e-04 - val_mean_absolute_error: 0.0166\n",
            "Epoch 170/200\n",
            "15/15 [==============================] - 1s 78ms/step - loss: 0.0020 - mean_absolute_error: 0.0297 - val_loss: 3.9463e-04 - val_mean_absolute_error: 0.0145\n",
            "Epoch 171/200\n",
            "15/15 [==============================] - 1s 80ms/step - loss: 0.0019 - mean_absolute_error: 0.0293 - val_loss: 4.4680e-04 - val_mean_absolute_error: 0.0160\n",
            "Epoch 172/200\n",
            "15/15 [==============================] - 1s 78ms/step - loss: 0.0019 - mean_absolute_error: 0.0292 - val_loss: 4.8991e-04 - val_mean_absolute_error: 0.0172\n",
            "Epoch 173/200\n",
            "15/15 [==============================] - 1s 71ms/step - loss: 0.0020 - mean_absolute_error: 0.0300 - val_loss: 4.0545e-04 - val_mean_absolute_error: 0.0148\n",
            "Epoch 174/200\n",
            "15/15 [==============================] - 1s 75ms/step - loss: 0.0020 - mean_absolute_error: 0.0303 - val_loss: 5.2288e-04 - val_mean_absolute_error: 0.0178\n",
            "Epoch 175/200\n",
            "15/15 [==============================] - 1s 75ms/step - loss: 0.0020 - mean_absolute_error: 0.0305 - val_loss: 3.9026e-04 - val_mean_absolute_error: 0.0144\n",
            "Epoch 176/200\n",
            "15/15 [==============================] - 1s 72ms/step - loss: 0.0019 - mean_absolute_error: 0.0294 - val_loss: 3.6911e-04 - val_mean_absolute_error: 0.0140\n",
            "Epoch 177/200\n",
            "15/15 [==============================] - 2s 111ms/step - loss: 0.0020 - mean_absolute_error: 0.0304 - val_loss: 4.1213e-04 - val_mean_absolute_error: 0.0148\n",
            "Epoch 178/200\n",
            "15/15 [==============================] - 2s 120ms/step - loss: 0.0020 - mean_absolute_error: 0.0299 - val_loss: 4.0711e-04 - val_mean_absolute_error: 0.0147\n",
            "Epoch 179/200\n",
            "15/15 [==============================] - 1s 70ms/step - loss: 0.0020 - mean_absolute_error: 0.0301 - val_loss: 3.8375e-04 - val_mean_absolute_error: 0.0142\n",
            "Epoch 180/200\n",
            "15/15 [==============================] - 1s 68ms/step - loss: 0.0019 - mean_absolute_error: 0.0292 - val_loss: 5.2596e-04 - val_mean_absolute_error: 0.0174\n",
            "Epoch 181/200\n",
            "15/15 [==============================] - 1s 71ms/step - loss: 0.0019 - mean_absolute_error: 0.0293 - val_loss: 4.3686e-04 - val_mean_absolute_error: 0.0155\n",
            "Epoch 182/200\n",
            "15/15 [==============================] - 1s 77ms/step - loss: 0.0019 - mean_absolute_error: 0.0295 - val_loss: 3.9975e-04 - val_mean_absolute_error: 0.0148\n",
            "Epoch 183/200\n",
            "15/15 [==============================] - 1s 72ms/step - loss: 0.0020 - mean_absolute_error: 0.0306 - val_loss: 4.9457e-04 - val_mean_absolute_error: 0.0174\n",
            "Epoch 184/200\n",
            "15/15 [==============================] - 1s 71ms/step - loss: 0.0020 - mean_absolute_error: 0.0297 - val_loss: 4.2219e-04 - val_mean_absolute_error: 0.0150\n",
            "Epoch 185/200\n",
            "15/15 [==============================] - 1s 68ms/step - loss: 0.0019 - mean_absolute_error: 0.0297 - val_loss: 3.8941e-04 - val_mean_absolute_error: 0.0146\n",
            "Epoch 186/200\n",
            "15/15 [==============================] - 1s 71ms/step - loss: 0.0020 - mean_absolute_error: 0.0304 - val_loss: 3.9065e-04 - val_mean_absolute_error: 0.0144\n",
            "Epoch 187/200\n",
            "15/15 [==============================] - 1s 70ms/step - loss: 0.0019 - mean_absolute_error: 0.0295 - val_loss: 3.9118e-04 - val_mean_absolute_error: 0.0146\n",
            "Epoch 188/200\n",
            "15/15 [==============================] - 1s 89ms/step - loss: 0.0019 - mean_absolute_error: 0.0295 - val_loss: 4.6157e-04 - val_mean_absolute_error: 0.0164\n",
            "Epoch 189/200\n",
            "15/15 [==============================] - 2s 108ms/step - loss: 0.0019 - mean_absolute_error: 0.0288 - val_loss: 4.3884e-04 - val_mean_absolute_error: 0.0157\n",
            "Epoch 190/200\n",
            "15/15 [==============================] - 2s 113ms/step - loss: 0.0018 - mean_absolute_error: 0.0285 - val_loss: 3.7033e-04 - val_mean_absolute_error: 0.0141\n",
            "Epoch 191/200\n",
            "15/15 [==============================] - 1s 76ms/step - loss: 0.0019 - mean_absolute_error: 0.0291 - val_loss: 5.5963e-04 - val_mean_absolute_error: 0.0190\n",
            "Epoch 192/200\n",
            "15/15 [==============================] - 1s 77ms/step - loss: 0.0019 - mean_absolute_error: 0.0299 - val_loss: 4.6299e-04 - val_mean_absolute_error: 0.0168\n",
            "Epoch 193/200\n",
            "15/15 [==============================] - 1s 77ms/step - loss: 0.0019 - mean_absolute_error: 0.0293 - val_loss: 3.8391e-04 - val_mean_absolute_error: 0.0142\n",
            "Epoch 194/200\n",
            "15/15 [==============================] - 1s 78ms/step - loss: 0.0019 - mean_absolute_error: 0.0293 - val_loss: 4.4980e-04 - val_mean_absolute_error: 0.0161\n",
            "Epoch 195/200\n",
            "15/15 [==============================] - 1s 70ms/step - loss: 0.0020 - mean_absolute_error: 0.0301 - val_loss: 3.7787e-04 - val_mean_absolute_error: 0.0142\n",
            "Epoch 196/200\n",
            "15/15 [==============================] - 1s 70ms/step - loss: 0.0019 - mean_absolute_error: 0.0289 - val_loss: 4.6344e-04 - val_mean_absolute_error: 0.0161\n",
            "Epoch 197/200\n",
            "15/15 [==============================] - 1s 70ms/step - loss: 0.0018 - mean_absolute_error: 0.0290 - val_loss: 5.0400e-04 - val_mean_absolute_error: 0.0178\n",
            "Epoch 198/200\n",
            "15/15 [==============================] - 1s 72ms/step - loss: 0.0018 - mean_absolute_error: 0.0289 - val_loss: 9.5389e-04 - val_mean_absolute_error: 0.0262\n",
            "Epoch 199/200\n",
            "15/15 [==============================] - 1s 70ms/step - loss: 0.0020 - mean_absolute_error: 0.0308 - val_loss: 4.3151e-04 - val_mean_absolute_error: 0.0158\n",
            "Epoch 200/200\n",
            "15/15 [==============================] - 1s 98ms/step - loss: 0.0019 - mean_absolute_error: 0.0291 - val_loss: 6.5443e-04 - val_mean_absolute_error: 0.0210\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.History at 0x7ceebef2a890>"
            ]
          },
          "metadata": {},
          "execution_count": 140
        }
      ],
      "source": [
        "model.fit(x_train,y_train,validation_data=(x_test,y_test), epochs=200, batch_size=64, verbose=1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 141,
      "metadata": {
        "id": "pNd41OQ7O5AE",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "31fa61cb-50bb-4572-d705-58c1702243db"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10/10 [==============================] - 2s 12ms/step\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.37294263, 0.37962806, 0.36861107, 0.3746977 , 0.3745066 ,\n",
              "        0.10998148],\n",
              "       [0.37158343, 0.3781974 , 0.36733934, 0.3733416 , 0.37313995,\n",
              "        0.1109579 ],\n",
              "       [0.37997276, 0.38662112, 0.37572277, 0.38173282, 0.38150957,\n",
              "        0.11158495],\n",
              "       [0.38388455, 0.3905752 , 0.37969416, 0.38567463, 0.3854972 ,\n",
              "        0.11104473],\n",
              "       [0.38249412, 0.38919505, 0.37838563, 0.3843217 , 0.38420618,\n",
              "        0.11027446]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 141
        }
      ],
      "source": [
        "test_predicted = model.predict(x_test)\n",
        "test_predicted[:5]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 142,
      "metadata": {
        "id": "r4DFsNSXQW1W",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "b4cf8e30-c5ad-465b-e04a-f3d204148e88"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(294, 6)"
            ]
          },
          "metadata": {},
          "execution_count": 142
        }
      ],
      "source": [
        "test_predicted.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 143,
      "metadata": {
        "id": "PPbQ7bqMO5sm",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "ad1a5f13-b6d9-4581-b163-9f7875229cc8"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1.62384003e+02, 1.66247391e+02, 1.58414749e+02, 1.62427399e+02,\n",
              "        1.62351746e+02, 1.26700240e+08],\n",
              "       [1.61844086e+02, 1.65674896e+02, 1.57916748e+02, 1.61890549e+02,\n",
              "        1.61810730e+02, 1.27564056e+08],\n",
              "       [1.65176590e+02, 1.69045746e+02, 1.61199692e+02, 1.65212448e+02,\n",
              "        1.65124069e+02, 1.28118800e+08],\n",
              "       [1.66730469e+02, 1.70628021e+02, 1.62754898e+02, 1.66772919e+02,\n",
              "        1.66702682e+02, 1.27640872e+08],\n",
              "       [1.66178146e+02, 1.70075745e+02, 1.62242477e+02, 1.66237320e+02,\n",
              "        1.66191589e+02, 1.26959440e+08]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 143
        }
      ],
      "source": [
        "test_inverse_predicted = MMS.inverse_transform(test_predicted)\n",
        "s = test_inverse_predicted.shape[0]\n",
        "test_inverse_predicted[:5]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 144,
      "metadata": {
        "id": "_wom6SlMPGdn"
      },
      "outputs": [],
      "source": [
        "df_merge = pd.concat([data.iloc[-1*s:].copy(),\n",
        "                          pd.DataFrame(test_inverse_predicted,columns=['Open_predicted', 'High_predicted', 'Low_predicted', 'Close_predicted', 'Adj Close_predicted', 'Volume_predicted'],\n",
        "                                       index=data.iloc[-1*s:].index)], axis=1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 145,
      "metadata": {
        "id": "f4r98Qh_UrA7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 666
        },
        "outputId": "de4fdf56-6f50-4173-c94e-48adb9010ef2"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  Open        High         Low       Close   Adj Close  \\\n",
              "Date                                                                     \n",
              "2023-04-27  152.639999  160.479996  152.369995  160.190002  160.190002   \n",
              "2023-04-28  160.899994  165.000000  157.320007  164.309998  164.309998   \n",
              "2023-05-01  163.169998  163.279999  158.830002  161.830002  161.830002   \n",
              "2023-05-02  161.880005  165.490005  158.929993  160.309998  160.309998   \n",
              "2023-05-03  160.009995  165.000000  159.910004  160.610001  160.610001   \n",
              "...                ...         ...         ...         ...         ...   \n",
              "2024-06-21  182.300003  183.949997  180.690002  183.009995  183.009995   \n",
              "2024-06-24  184.970001  188.800003  182.550003  182.580002  182.580002   \n",
              "2024-06-25  184.399994  187.970001  182.009995  187.350006  187.350006   \n",
              "2024-06-26  186.539993  197.759995  186.360001  196.369995  196.369995   \n",
              "2024-06-27  195.169998  198.720001  194.050003  197.419998  197.419998   \n",
              "\n",
              "               Volume  Open_predicted  High_predicted  Low_predicted  \\\n",
              "Date                                                                   \n",
              "2023-04-27  127015200      162.384003      166.247391     158.414749   \n",
              "2023-04-28  122515800      161.844086      165.674896     157.916748   \n",
              "2023-05-01  109015000      165.176590      169.045746     161.199692   \n",
              "2023-05-02  128259700      166.730469      170.628021     162.754898   \n",
              "2023-05-03  119728000      166.178146      170.075745     162.242477   \n",
              "...               ...             ...             ...            ...   \n",
              "2024-06-21   63029500      191.398422      195.718811     187.087616   \n",
              "2024-06-24   61992100      190.060760      194.334488     185.811752   \n",
              "2024-06-25   63678300      189.727676      193.958801     185.524490   \n",
              "2024-06-26   95737100      191.852417      196.083557     187.631348   \n",
              "2024-06-27   72616000      198.592941      202.931641     194.204269   \n",
              "\n",
              "            Close_predicted  Adj Close_predicted  Volume_predicted  \n",
              "Date                                                                \n",
              "2023-04-27       162.427399           162.351746       126700240.0  \n",
              "2023-04-28       161.890549           161.810730       127564056.0  \n",
              "2023-05-01       165.212448           165.124069       128118800.0  \n",
              "2023-05-02       166.772919           166.702682       127640872.0  \n",
              "2023-05-03       166.237320           166.191589       126959440.0  \n",
              "...                     ...                  ...               ...  \n",
              "2024-06-21       191.376968           191.403275        93508368.0  \n",
              "2024-06-24       190.052124           190.084244        92103168.0  \n",
              "2024-06-25       189.721710           189.750961        89943600.0  \n",
              "2024-06-26       191.832581           191.848862        87783608.0  \n",
              "2024-06-27       198.530670           198.517410        87316624.0  \n",
              "\n",
              "[294 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-66756c69-9554-420f-9049-3a69fc076536\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>Open_predicted</th>\n",
              "      <th>High_predicted</th>\n",
              "      <th>Low_predicted</th>\n",
              "      <th>Close_predicted</th>\n",
              "      <th>Adj Close_predicted</th>\n",
              "      <th>Volume_predicted</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2023-04-27</th>\n",
              "      <td>152.639999</td>\n",
              "      <td>160.479996</td>\n",
              "      <td>152.369995</td>\n",
              "      <td>160.190002</td>\n",
              "      <td>160.190002</td>\n",
              "      <td>127015200</td>\n",
              "      <td>162.384003</td>\n",
              "      <td>166.247391</td>\n",
              "      <td>158.414749</td>\n",
              "      <td>162.427399</td>\n",
              "      <td>162.351746</td>\n",
              "      <td>126700240.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-04-28</th>\n",
              "      <td>160.899994</td>\n",
              "      <td>165.000000</td>\n",
              "      <td>157.320007</td>\n",
              "      <td>164.309998</td>\n",
              "      <td>164.309998</td>\n",
              "      <td>122515800</td>\n",
              "      <td>161.844086</td>\n",
              "      <td>165.674896</td>\n",
              "      <td>157.916748</td>\n",
              "      <td>161.890549</td>\n",
              "      <td>161.810730</td>\n",
              "      <td>127564056.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-05-01</th>\n",
              "      <td>163.169998</td>\n",
              "      <td>163.279999</td>\n",
              "      <td>158.830002</td>\n",
              "      <td>161.830002</td>\n",
              "      <td>161.830002</td>\n",
              "      <td>109015000</td>\n",
              "      <td>165.176590</td>\n",
              "      <td>169.045746</td>\n",
              "      <td>161.199692</td>\n",
              "      <td>165.212448</td>\n",
              "      <td>165.124069</td>\n",
              "      <td>128118800.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-05-02</th>\n",
              "      <td>161.880005</td>\n",
              "      <td>165.490005</td>\n",
              "      <td>158.929993</td>\n",
              "      <td>160.309998</td>\n",
              "      <td>160.309998</td>\n",
              "      <td>128259700</td>\n",
              "      <td>166.730469</td>\n",
              "      <td>170.628021</td>\n",
              "      <td>162.754898</td>\n",
              "      <td>166.772919</td>\n",
              "      <td>166.702682</td>\n",
              "      <td>127640872.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-05-03</th>\n",
              "      <td>160.009995</td>\n",
              "      <td>165.000000</td>\n",
              "      <td>159.910004</td>\n",
              "      <td>160.610001</td>\n",
              "      <td>160.610001</td>\n",
              "      <td>119728000</td>\n",
              "      <td>166.178146</td>\n",
              "      <td>170.075745</td>\n",
              "      <td>162.242477</td>\n",
              "      <td>166.237320</td>\n",
              "      <td>166.191589</td>\n",
              "      <td>126959440.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-21</th>\n",
              "      <td>182.300003</td>\n",
              "      <td>183.949997</td>\n",
              "      <td>180.690002</td>\n",
              "      <td>183.009995</td>\n",
              "      <td>183.009995</td>\n",
              "      <td>63029500</td>\n",
              "      <td>191.398422</td>\n",
              "      <td>195.718811</td>\n",
              "      <td>187.087616</td>\n",
              "      <td>191.376968</td>\n",
              "      <td>191.403275</td>\n",
              "      <td>93508368.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-24</th>\n",
              "      <td>184.970001</td>\n",
              "      <td>188.800003</td>\n",
              "      <td>182.550003</td>\n",
              "      <td>182.580002</td>\n",
              "      <td>182.580002</td>\n",
              "      <td>61992100</td>\n",
              "      <td>190.060760</td>\n",
              "      <td>194.334488</td>\n",
              "      <td>185.811752</td>\n",
              "      <td>190.052124</td>\n",
              "      <td>190.084244</td>\n",
              "      <td>92103168.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-25</th>\n",
              "      <td>184.399994</td>\n",
              "      <td>187.970001</td>\n",
              "      <td>182.009995</td>\n",
              "      <td>187.350006</td>\n",
              "      <td>187.350006</td>\n",
              "      <td>63678300</td>\n",
              "      <td>189.727676</td>\n",
              "      <td>193.958801</td>\n",
              "      <td>185.524490</td>\n",
              "      <td>189.721710</td>\n",
              "      <td>189.750961</td>\n",
              "      <td>89943600.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-26</th>\n",
              "      <td>186.539993</td>\n",
              "      <td>197.759995</td>\n",
              "      <td>186.360001</td>\n",
              "      <td>196.369995</td>\n",
              "      <td>196.369995</td>\n",
              "      <td>95737100</td>\n",
              "      <td>191.852417</td>\n",
              "      <td>196.083557</td>\n",
              "      <td>187.631348</td>\n",
              "      <td>191.832581</td>\n",
              "      <td>191.848862</td>\n",
              "      <td>87783608.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-27</th>\n",
              "      <td>195.169998</td>\n",
              "      <td>198.720001</td>\n",
              "      <td>194.050003</td>\n",
              "      <td>197.419998</td>\n",
              "      <td>197.419998</td>\n",
              "      <td>72616000</td>\n",
              "      <td>198.592941</td>\n",
              "      <td>202.931641</td>\n",
              "      <td>194.204269</td>\n",
              "      <td>198.530670</td>\n",
              "      <td>198.517410</td>\n",
              "      <td>87316624.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>294 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-66756c69-9554-420f-9049-3a69fc076536')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-66756c69-9554-420f-9049-3a69fc076536 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-66756c69-9554-420f-9049-3a69fc076536');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b5e52bb7-7a49-4a2e-a53b-21f53286e2cf\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b5e52bb7-7a49-4a2e-a53b-21f53286e2cf')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b5e52bb7-7a49-4a2e-a53b-21f53286e2cf button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_fffed85f-bd80-48c8-a52b-8a64140151f0\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_merge')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_fffed85f-bd80-48c8-a52b-8a64140151f0 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_merge');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_merge",
              "summary": "{\n  \"name\": \"df_merge\",\n  \"rows\": 294,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2023-04-27 00:00:00\",\n        \"max\": \"2024-06-27 00:00:00\",\n        \"num_unique_values\": 294,\n        \"samples\": [\n          \"2023-06-14 00:00:00\",\n          \"2023-05-10 00:00:00\",\n          \"2023-11-24 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 37.59741022431232,\n        \"min\": 140.55999755859375,\n        \"max\": 296.0400085449219,\n        \"num_unique_values\": 289,\n        \"samples\": [\n          276.489990234375,\n          242.74000549316406,\n          175.35000610351562\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.05679411316454,\n        \"min\": 144.44000244140625,\n        \"max\": 299.2900085449219,\n        \"num_unique_values\": 289,\n        \"samples\": [\n          283.8500061035156,\n          240.3000030517578,\n          179.72999572753906\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 36.89754115475372,\n        \"min\": 138.8000030517578,\n        \"max\": 289.5199890136719,\n        \"num_unique_values\": 290,\n        \"samples\": [\n          235.35000610351562,\n          169.0,\n          275.1099853515625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 37.482707198856595,\n        \"min\": 142.0500030517578,\n        \"max\": 293.3399963378906,\n        \"num_unique_values\": 293,\n        \"samples\": [\n          238.82000732421875,\n          168.47000122070312,\n          279.82000732421875\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Adj Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 37.482707198856595,\n        \"min\": 142.0500030517578,\n        \"max\": 293.3399963378906,\n        \"num_unique_values\": 293,\n        \"samples\": [\n          238.82000732421875,\n          168.47000122070312,\n          279.82000732421875\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29547171,\n        \"min\": 50869700,\n        \"max\": 243869700,\n        \"num_unique_values\": 294,\n        \"samples\": [\n          170575500,\n          119840700,\n          65125200\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open_predicted\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 294,\n        \"samples\": [\n          265.48455810546875,\n          176.4690399169922,\n          245.05650329589844\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High_predicted\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 294,\n        \"samples\": [\n          271.90045166015625,\n          180.52894592285156,\n          250.83786010742188\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low_predicted\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 294,\n        \"samples\": [\n          258.2308044433594,\n          172.3733367919922,\n          238.54653930664062\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close_predicted\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 294,\n        \"samples\": [\n          264.9283752441406,\n          176.50856018066406,\n          244.623291015625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Adj Close_predicted\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 293,\n        \"samples\": [\n          243.42947387695312,\n          178.43524169921875,\n          267.20294189453125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume_predicted\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 294,\n        \"samples\": [\n          141680160.0,\n          120572512.0,\n          120922960.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 145
        }
      ],
      "source": [
        "df_merge"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 146,
      "metadata": {
        "id": "cbIiRxa946_a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 848
        },
        "outputId": "b752935e-d63a-44f8-9ffc-fabba2090541"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  Open        High         Low       Close   Adj Close  \\\n",
              "Date                                                                     \n",
              "2024-06-06  174.600006  179.729996  172.729996  177.940002  177.940002   \n",
              "2024-06-07  176.130005  179.350006  175.580002  177.479996  177.479996   \n",
              "2024-06-10  176.059998  178.570007  173.169998  173.789993  173.789993   \n",
              "2024-06-11  173.919998  174.750000  167.410004  170.660004  170.660004   \n",
              "2024-06-12  171.119995  180.550003  169.800003  177.289993  177.289993   \n",
              "2024-06-13  188.389999  191.080002  181.229996  182.470001  182.470001   \n",
              "2024-06-14  185.800003  186.000000  176.919998  178.009995  178.009995   \n",
              "2024-06-17  177.919998  188.809998  177.000000  187.440002  187.440002   \n",
              "2024-06-18  186.559998  187.199997  182.369995  184.860001  184.860001   \n",
              "2024-06-20  184.679993  185.210007  179.660004  181.570007  181.570007   \n",
              "2024-06-21  182.300003  183.949997  180.690002  183.009995  183.009995   \n",
              "2024-06-24  184.970001  188.800003  182.550003  182.580002  182.580002   \n",
              "2024-06-25  184.399994  187.970001  182.009995  187.350006  187.350006   \n",
              "2024-06-26  186.539993  197.759995  186.360001  196.369995  196.369995   \n",
              "2024-06-27  195.169998  198.720001  194.050003  197.419998  197.419998   \n",
              "\n",
              "               Volume  Open_predicted  High_predicted  Low_predicted  \\\n",
              "Date                                                                   \n",
              "2024-06-06   69887000      181.164597      185.125275     177.311813   \n",
              "2024-06-07   56244900      182.375259      186.341415     178.507584   \n",
              "2024-06-10   50869700      183.747131      187.732605     179.857208   \n",
              "2024-06-11   64761900      182.321564      186.286438     178.481995   \n",
              "2024-06-12   90389400      178.834137      182.736618     175.093811   \n",
              "2024-06-13  118984100      180.227036      184.138626     176.448868   \n",
              "2024-06-14   82038200      186.479858      190.524368     182.488815   \n",
              "2024-06-17  109786100      187.707977      191.846344     183.608093   \n",
              "2024-06-18   68982300      191.362869      195.619965     187.100449   \n",
              "2024-06-20   55893100      193.385681      197.722977     189.027420   \n",
              "2024-06-21   63029500      191.398422      195.718811     187.087616   \n",
              "2024-06-24   61992100      190.060760      194.334488     185.811752   \n",
              "2024-06-25   63678300      189.727676      193.958801     185.524490   \n",
              "2024-06-26   95737100      191.852417      196.083557     187.631348   \n",
              "2024-06-27   72616000      198.592941      202.931641     194.204269   \n",
              "\n",
              "            Close_predicted  Adj Close_predicted  Volume_predicted  \n",
              "Date                                                                \n",
              "2024-06-06       181.194458           181.235443        81918600.0  \n",
              "2024-06-07       182.398132           182.430679        80907168.0  \n",
              "2024-06-10       183.764877           183.795685        80057680.0  \n",
              "2024-06-11       182.353088           182.399109        78847376.0  \n",
              "2024-06-12       178.887817           178.948837        77642440.0  \n",
              "2024-06-13       180.266037           180.306992        77701288.0  \n",
              "2024-06-14       186.473648           186.477219        81026640.0  \n",
              "2024-06-17       187.693710           187.704208        85469472.0  \n",
              "2024-06-18       191.327469           191.325989        89941768.0  \n",
              "2024-06-20       193.344330           193.347107        93021584.0  \n",
              "2024-06-21       191.376968           191.403275        93508368.0  \n",
              "2024-06-24       190.052124           190.084244        92103168.0  \n",
              "2024-06-25       189.721710           189.750961        89943600.0  \n",
              "2024-06-26       191.832581           191.848862        87783608.0  \n",
              "2024-06-27       198.530670           198.517410        87316624.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0de31ffc-c211-4758-9f21-e83271cc034c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>Open_predicted</th>\n",
              "      <th>High_predicted</th>\n",
              "      <th>Low_predicted</th>\n",
              "      <th>Close_predicted</th>\n",
              "      <th>Adj Close_predicted</th>\n",
              "      <th>Volume_predicted</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2024-06-06</th>\n",
              "      <td>174.600006</td>\n",
              "      <td>179.729996</td>\n",
              "      <td>172.729996</td>\n",
              "      <td>177.940002</td>\n",
              "      <td>177.940002</td>\n",
              "      <td>69887000</td>\n",
              "      <td>181.164597</td>\n",
              "      <td>185.125275</td>\n",
              "      <td>177.311813</td>\n",
              "      <td>181.194458</td>\n",
              "      <td>181.235443</td>\n",
              "      <td>81918600.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-07</th>\n",
              "      <td>176.130005</td>\n",
              "      <td>179.350006</td>\n",
              "      <td>175.580002</td>\n",
              "      <td>177.479996</td>\n",
              "      <td>177.479996</td>\n",
              "      <td>56244900</td>\n",
              "      <td>182.375259</td>\n",
              "      <td>186.341415</td>\n",
              "      <td>178.507584</td>\n",
              "      <td>182.398132</td>\n",
              "      <td>182.430679</td>\n",
              "      <td>80907168.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-10</th>\n",
              "      <td>176.059998</td>\n",
              "      <td>178.570007</td>\n",
              "      <td>173.169998</td>\n",
              "      <td>173.789993</td>\n",
              "      <td>173.789993</td>\n",
              "      <td>50869700</td>\n",
              "      <td>183.747131</td>\n",
              "      <td>187.732605</td>\n",
              "      <td>179.857208</td>\n",
              "      <td>183.764877</td>\n",
              "      <td>183.795685</td>\n",
              "      <td>80057680.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-11</th>\n",
              "      <td>173.919998</td>\n",
              "      <td>174.750000</td>\n",
              "      <td>167.410004</td>\n",
              "      <td>170.660004</td>\n",
              "      <td>170.660004</td>\n",
              "      <td>64761900</td>\n",
              "      <td>182.321564</td>\n",
              "      <td>186.286438</td>\n",
              "      <td>178.481995</td>\n",
              "      <td>182.353088</td>\n",
              "      <td>182.399109</td>\n",
              "      <td>78847376.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-12</th>\n",
              "      <td>171.119995</td>\n",
              "      <td>180.550003</td>\n",
              "      <td>169.800003</td>\n",
              "      <td>177.289993</td>\n",
              "      <td>177.289993</td>\n",
              "      <td>90389400</td>\n",
              "      <td>178.834137</td>\n",
              "      <td>182.736618</td>\n",
              "      <td>175.093811</td>\n",
              "      <td>178.887817</td>\n",
              "      <td>178.948837</td>\n",
              "      <td>77642440.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-13</th>\n",
              "      <td>188.389999</td>\n",
              "      <td>191.080002</td>\n",
              "      <td>181.229996</td>\n",
              "      <td>182.470001</td>\n",
              "      <td>182.470001</td>\n",
              "      <td>118984100</td>\n",
              "      <td>180.227036</td>\n",
              "      <td>184.138626</td>\n",
              "      <td>176.448868</td>\n",
              "      <td>180.266037</td>\n",
              "      <td>180.306992</td>\n",
              "      <td>77701288.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-14</th>\n",
              "      <td>185.800003</td>\n",
              "      <td>186.000000</td>\n",
              "      <td>176.919998</td>\n",
              "      <td>178.009995</td>\n",
              "      <td>178.009995</td>\n",
              "      <td>82038200</td>\n",
              "      <td>186.479858</td>\n",
              "      <td>190.524368</td>\n",
              "      <td>182.488815</td>\n",
              "      <td>186.473648</td>\n",
              "      <td>186.477219</td>\n",
              "      <td>81026640.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-17</th>\n",
              "      <td>177.919998</td>\n",
              "      <td>188.809998</td>\n",
              "      <td>177.000000</td>\n",
              "      <td>187.440002</td>\n",
              "      <td>187.440002</td>\n",
              "      <td>109786100</td>\n",
              "      <td>187.707977</td>\n",
              "      <td>191.846344</td>\n",
              "      <td>183.608093</td>\n",
              "      <td>187.693710</td>\n",
              "      <td>187.704208</td>\n",
              "      <td>85469472.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-18</th>\n",
              "      <td>186.559998</td>\n",
              "      <td>187.199997</td>\n",
              "      <td>182.369995</td>\n",
              "      <td>184.860001</td>\n",
              "      <td>184.860001</td>\n",
              "      <td>68982300</td>\n",
              "      <td>191.362869</td>\n",
              "      <td>195.619965</td>\n",
              "      <td>187.100449</td>\n",
              "      <td>191.327469</td>\n",
              "      <td>191.325989</td>\n",
              "      <td>89941768.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-20</th>\n",
              "      <td>184.679993</td>\n",
              "      <td>185.210007</td>\n",
              "      <td>179.660004</td>\n",
              "      <td>181.570007</td>\n",
              "      <td>181.570007</td>\n",
              "      <td>55893100</td>\n",
              "      <td>193.385681</td>\n",
              "      <td>197.722977</td>\n",
              "      <td>189.027420</td>\n",
              "      <td>193.344330</td>\n",
              "      <td>193.347107</td>\n",
              "      <td>93021584.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-21</th>\n",
              "      <td>182.300003</td>\n",
              "      <td>183.949997</td>\n",
              "      <td>180.690002</td>\n",
              "      <td>183.009995</td>\n",
              "      <td>183.009995</td>\n",
              "      <td>63029500</td>\n",
              "      <td>191.398422</td>\n",
              "      <td>195.718811</td>\n",
              "      <td>187.087616</td>\n",
              "      <td>191.376968</td>\n",
              "      <td>191.403275</td>\n",
              "      <td>93508368.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-24</th>\n",
              "      <td>184.970001</td>\n",
              "      <td>188.800003</td>\n",
              "      <td>182.550003</td>\n",
              "      <td>182.580002</td>\n",
              "      <td>182.580002</td>\n",
              "      <td>61992100</td>\n",
              "      <td>190.060760</td>\n",
              "      <td>194.334488</td>\n",
              "      <td>185.811752</td>\n",
              "      <td>190.052124</td>\n",
              "      <td>190.084244</td>\n",
              "      <td>92103168.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-25</th>\n",
              "      <td>184.399994</td>\n",
              "      <td>187.970001</td>\n",
              "      <td>182.009995</td>\n",
              "      <td>187.350006</td>\n",
              "      <td>187.350006</td>\n",
              "      <td>63678300</td>\n",
              "      <td>189.727676</td>\n",
              "      <td>193.958801</td>\n",
              "      <td>185.524490</td>\n",
              "      <td>189.721710</td>\n",
              "      <td>189.750961</td>\n",
              "      <td>89943600.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-26</th>\n",
              "      <td>186.539993</td>\n",
              "      <td>197.759995</td>\n",
              "      <td>186.360001</td>\n",
              "      <td>196.369995</td>\n",
              "      <td>196.369995</td>\n",
              "      <td>95737100</td>\n",
              "      <td>191.852417</td>\n",
              "      <td>196.083557</td>\n",
              "      <td>187.631348</td>\n",
              "      <td>191.832581</td>\n",
              "      <td>191.848862</td>\n",
              "      <td>87783608.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-27</th>\n",
              "      <td>195.169998</td>\n",
              "      <td>198.720001</td>\n",
              "      <td>194.050003</td>\n",
              "      <td>197.419998</td>\n",
              "      <td>197.419998</td>\n",
              "      <td>72616000</td>\n",
              "      <td>198.592941</td>\n",
              "      <td>202.931641</td>\n",
              "      <td>194.204269</td>\n",
              "      <td>198.530670</td>\n",
              "      <td>198.517410</td>\n",
              "      <td>87316624.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0de31ffc-c211-4758-9f21-e83271cc034c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0de31ffc-c211-4758-9f21-e83271cc034c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0de31ffc-c211-4758-9f21-e83271cc034c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9b44a03b-4f5f-4b9d-84a5-66ebbc6ce02e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9b44a03b-4f5f-4b9d-84a5-66ebbc6ce02e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9b44a03b-4f5f-4b9d-84a5-66ebbc6ce02e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df_merge\",\n  \"rows\": 15,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2024-06-06 00:00:00\",\n        \"max\": \"2024-06-27 00:00:00\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"2024-06-20 00:00:00\",\n          \"2024-06-24 00:00:00\",\n          \"2024-06-06 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.636741956678969,\n        \"min\": 171.1199951171875,\n        \"max\": 195.1699981689453,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          184.67999267578125,\n          184.97000122070312,\n          174.60000610351562\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.796169558613612,\n        \"min\": 174.75,\n        \"max\": 198.72000122070312,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          185.2100067138672,\n          188.8000030517578,\n          179.72999572753906\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.726526126940222,\n        \"min\": 167.41000366210938,\n        \"max\": 194.0500030517578,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          179.66000366210938,\n          182.5500030517578,\n          172.72999572753906\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.459044086413347,\n        \"min\": 170.66000366210938,\n        \"max\": 197.4199981689453,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          181.57000732421875,\n          182.5800018310547,\n          177.94000244140625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Adj Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.459044086413347,\n        \"min\": 170.66000366210938,\n        \"max\": 197.4199981689453,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          181.57000732421875,\n          182.5800018310547,\n          177.94000244140625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20307820,\n        \"min\": 50869700,\n        \"max\": 118984100,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          55893100,\n          61992100,\n          69887000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open_predicted\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          193.38568115234375,\n          190.06076049804688,\n          181.1645965576172\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High_predicted\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          197.7229766845703,\n          194.33448791503906,\n          185.12527465820312\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low_predicted\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          189.0274200439453,\n          185.81175231933594,\n          177.3118133544922\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close_predicted\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          193.34432983398438,\n          190.0521240234375,\n          181.1944580078125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Adj Close_predicted\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          193.34710693359375,\n          190.08424377441406,\n          181.23544311523438\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume_predicted\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          93021584.0,\n          92103168.0,\n          81918600.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 146
        }
      ],
      "source": [
        "df_merge.tail(15)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 147,
      "metadata": {
        "id": "Dbo_kzFzKYYg",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 555
        },
        "outputId": "e16e2649-4560-4ac7-b30d-e2e997d070e8"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "df_merge[['Open','Open_predicted']].plot(figsize=(10,6))\n",
        "plt.xticks(rotation=45)\n",
        "plt.xlabel('Date',size=15)\n",
        "plt.ylabel('Stock Price',size=15)\n",
        "plt.title('Actual vs Predicted for open price',size=15)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 148,
      "metadata": {
        "id": "jEQzdEciTraC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 571
        },
        "outputId": "46ff3a9f-e477-4d6d-bb93-c0fef1101fcd"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "df_merge[['Open','Open_predicted']][-22:].plot(figsize=(10,6))\n",
        "plt.xticks(rotation=45)\n",
        "plt.xlabel('Date',size=15)\n",
        "plt.ylabel('Stock Price',size=15)\n",
        "plt.title('Actual vs Predicted for close price',size=15)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 149,
      "metadata": {
        "id": "0nmZ0e_Z6n7W"
      },
      "outputs": [],
      "source": [
        "df_future = df_merge._append(pd.DataFrame(columns=df_merge.columns,index=pd.date_range(start=df_merge.index[-1], periods=3, freq='D')))\n",
        "#df_merge[date.today(): date.today()+timedelta(12)]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 150,
      "metadata": {
        "id": "23RbTZR2r8XB"
      },
      "outputs": [],
      "source": [
        "upcoming_prediction = pd.DataFrame(columns=['Open','High','Low','Close','Adj Close','Volume'],index=df_future[-3:].index)\n",
        "upcoming_prediction.index=pd.to_datetime(upcoming_prediction.index)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 151,
      "metadata": {
        "id": "sOUtFdip6v2U",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "74c1b432-f3ff-4c37-eff6-35790263ad9e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n"
          ]
        }
      ],
      "source": [
        "curr_seq = x_test[-1:]\n",
        "x = None\n",
        "for i in range(-2,0):\n",
        "  up_pred = model.predict(curr_seq)\n",
        "  upcoming_prediction.iloc[i] = up_pred\n",
        "  curr_seq = np.append(curr_seq[0][1:],up_pred,axis=0)\n",
        "  curr_seq = curr_seq.reshape(x_test[-1:].shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 152,
      "metadata": {
        "id": "Va8q7frxW-LY",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "28921398-cac1-4485-9ac1-c0e004f8c7cc"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.4795602 , 0.48701748, 0.47519797, 0.48132122, 0.48126125,\n",
              "        0.06686017]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 152
        }
      ],
      "source": [
        "up_pred"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 153,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "3n574FyqkI44",
        "outputId": "b628b608-b0db-42ad-f290-6a15e4035bf1"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                Open      High       Low     Close Adj Close    Volume\n",
              "2024-06-27  0.455479  0.460777   0.45961   0.46309   0.46309  0.048847\n",
              "2024-06-28  0.464096  0.471302  0.460004  0.465896  0.465862  0.065464\n",
              "2024-06-29   0.47956  0.487017  0.475198  0.481321  0.481261   0.06686"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-400e9999-bc69-4807-a2bc-581da887d7df\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2024-06-27</th>\n",
              "      <td>0.455479</td>\n",
              "      <td>0.460777</td>\n",
              "      <td>0.45961</td>\n",
              "      <td>0.46309</td>\n",
              "      <td>0.46309</td>\n",
              "      <td>0.048847</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-28</th>\n",
              "      <td>0.464096</td>\n",
              "      <td>0.471302</td>\n",
              "      <td>0.460004</td>\n",
              "      <td>0.465896</td>\n",
              "      <td>0.465862</td>\n",
              "      <td>0.065464</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-29</th>\n",
              "      <td>0.47956</td>\n",
              "      <td>0.487017</td>\n",
              "      <td>0.475198</td>\n",
              "      <td>0.481321</td>\n",
              "      <td>0.481261</td>\n",
              "      <td>0.06686</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-400e9999-bc69-4807-a2bc-581da887d7df')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-400e9999-bc69-4807-a2bc-581da887d7df button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-400e9999-bc69-4807-a2bc-581da887d7df');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fa209367-7765-434c-af35-d5086f1e9898\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fa209367-7765-434c-af35-d5086f1e9898')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fa209367-7765-434c-af35-d5086f1e9898 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_7ec5b7b5-03f0-438d-944a-24fda0d36352\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('upcoming_prediction')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_7ec5b7b5-03f0-438d-944a-24fda0d36352 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('upcoming_prediction');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "upcoming_prediction",
              "summary": "{\n  \"name\": \"upcoming_prediction\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 0.4554791877188817,\n        \"max\": 0.4795601963996887,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.4554791877188817,\n          0.46409618854522705,\n          0.4795601963996887\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 0.46077671312113244,\n        \"max\": 0.4870174825191498,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.46077671312113244,\n          0.47130152583122253,\n          0.4870174825191498\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 0.45961016622789735,\n        \"max\": 0.475197970867157,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.45961016622789735,\n          0.46000412106513977,\n          0.475197970867157\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 0.463090350491583,\n        \"max\": 0.48132121562957764,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.463090350491583,\n          0.46589601039886475,\n          0.48132121562957764\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Adj Close\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 0.463090350491583,\n        \"max\": 0.4812612533569336,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.463090350491583,\n          0.4658624827861786,\n          0.4812612533569336\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 0.04884725576541671,\n        \"max\": 0.06686016917228699,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.04884725576541671,\n          0.06546413898468018,\n          0.06686016917228699\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 153
        }
      ],
      "source": [
        "upcoming_prediction.iloc[0] = df.iloc[-1]\n",
        "upcoming_prediction"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 154,
      "metadata": {
        "id": "XgDIsBMctgI7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "outputId": "4a1fe016-83be-4523-8bbe-28c678d4060e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  Open        High         Low       Close   Adj Close  \\\n",
              "2024-06-27  195.169998  198.720001  194.050003  197.419998  197.419998   \n",
              "2024-06-28  198.592929  202.931631  194.204276  198.530693  198.517421   \n",
              "2024-06-29  204.735697  209.220560  200.154187  204.637172  204.613435   \n",
              "\n",
              "                  Volume  \n",
              "2024-06-27  7.261600e+07  \n",
              "2024-06-28  8.731663e+07  \n",
              "2024-06-29  8.855167e+07  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-46b1696f-50ee-49be-b35a-ece4fd9a1f9d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2024-06-27</th>\n",
              "      <td>195.169998</td>\n",
              "      <td>198.720001</td>\n",
              "      <td>194.050003</td>\n",
              "      <td>197.419998</td>\n",
              "      <td>197.419998</td>\n",
              "      <td>7.261600e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-28</th>\n",
              "      <td>198.592929</td>\n",
              "      <td>202.931631</td>\n",
              "      <td>194.204276</td>\n",
              "      <td>198.530693</td>\n",
              "      <td>198.517421</td>\n",
              "      <td>8.731663e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-29</th>\n",
              "      <td>204.735697</td>\n",
              "      <td>209.220560</td>\n",
              "      <td>200.154187</td>\n",
              "      <td>204.637172</td>\n",
              "      <td>204.613435</td>\n",
              "      <td>8.855167e+07</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-46b1696f-50ee-49be-b35a-ece4fd9a1f9d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-46b1696f-50ee-49be-b35a-ece4fd9a1f9d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-46b1696f-50ee-49be-b35a-ece4fd9a1f9d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9b7c02ec-c8ed-42ee-bb32-f573b390f2d1\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9b7c02ec-c8ed-42ee-bb32-f573b390f2d1')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9b7c02ec-c8ed-42ee-bb32-f573b390f2d1 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_71cd129a-efd6-4c97-aee1-86993e41b223\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('upcoming_prediction')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_71cd129a-efd6-4c97-aee1-86993e41b223 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('upcoming_prediction');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "upcoming_prediction",
              "summary": "{\n  \"name\": \"upcoming_prediction\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.846865909759785,\n        \"min\": 195.1699981689453,\n        \"max\": 204.73569728212976,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          195.1699981689453,\n          198.59292941968556,\n          204.73569728212976\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.284414056403267,\n        \"min\": 198.72000122070312,\n        \"max\": 209.22056015192075,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          198.72000122070312,\n          202.9316313915273,\n          209.22056015192075\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.480572512421721,\n        \"min\": 194.0500030517578,\n        \"max\": 200.1541871909156,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          194.0500030517578,\n          194.20427576203946,\n          200.1541871909156\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.8860933815670573,\n        \"min\": 197.4199981689453,\n        \"max\": 204.63717231410135,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          197.4199981689453,\n          198.5306934645149,\n          204.63717231410135\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Adj Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.875376348005032,\n        \"min\": 197.4199981689453,\n        \"max\": 204.61343464940273,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          197.4199981689453,\n          198.5174206649195,\n          204.61343464940273\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8865469.387486273,\n        \"min\": 72616000.0,\n        \"max\": 88551667.83537269,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          72616000.0,\n          87316627.56979465,\n          88551667.83537269\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 154
        }
      ],
      "source": [
        "upcoming_prediction[upcoming_prediction.columns] = MMS.inverse_transform(upcoming_prediction[upcoming_prediction.columns])\n",
        "upcoming_prediction"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 155,
      "metadata": {
        "id": "JwevkzA-7aoX",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 540
        },
        "outputId": "207eee29-9d04-4299-b90a-9dcd6b0c9663"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "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C5qffZpmYsYRMyrXrFmzMG7cOLz99ttwdXWFnZ0dnn76aRQWFur2UavV+OSTT9CqVSsoFAr4+Pjg/fff120/f/48Bg8eDEtLSzg7O2POnDmlRle05/jggw/g7u4OBwcHvPPOO1AqlViyZAmcnJzg5eWF1atX625z/1TGAwcOQCKRYN++fejWrRusrKzQu3dvREVFlbo/7733Htzc3GBra4snn3wSr7zyCjp37lzl47B69WqMGTMGzzzzDNavX4+8vLxS26Ojo9G/f39YWFigffv22LNnT5ljVDUF8dlnn4VEIsHJkycxYcIEtGnTBh06dMDixYtx/PjxCm9X1eN74MAB9OjRA9bW1nBwcECfPn1w48YN3fatW7eiS5cusLCwgL+/P95++20olcpKHw8zMzN4eHjAy8sLjzzyCKZNm4a///4bgGZErXPnzvjpp5/QokULWFhYACg7SltQUICXX34Z3t7eUCgUaNWqFVauXKnbfuHCBYwaNQo2NjZwd3fHY489hpSUlErjIiIiogYu7gQAATi3AmzdTR2NSTAxMxYhgMIc01yEqJW7tG/fPkRGRuLAgQNYv349Nm/ejLffflu3/dVXX8VHH32EN998E5cuXcK6devg7q55IeXk5GDEiBFwdHTEqVOnsHHjRuzduxfz588vdY7//vsPt2/fxqFDh7B8+XIsW7YMY8aMgaOjI06cOIGnn34ac+fOxc2bNyuN9fXXX8dnn32G06dPw8zMDE888YRu22+//Yb3338fH3/8McLCwuDj44Nvv/22yvsvhMDq1asxffp0BAQEoFWrVvjzzz9129VqNcaPHw+5XI4TJ07gu+++w8svv6zXY6uVlpaGnTt3Yt68ebC2LttEsaLppVU9vkqlEuPGjcOAAQMQERGBY8eOYc6cOZBIJACAw4cPY8aMGXj++edx6dIlfP/991izZk2pxFoflpaWpZL1q1evYtOmTdi8eXOF6wBnzJiB9evX46uvvkJkZCS+//572NjYAADS09MxePBgBAcH4/Tp09i5cyeSkpIwefLkasVFREREDUwT7l+mI+qhDz74QHTr1k3Y2NgIV1dX8dBDD4nLly+X2icvL088++yzwsnJSVhbW4vx48eLxMTEUvvcuHFDjB49WlhaWgpXV1fx4osviqKiIr3jyMjIEABERkZGmW15eXni0qVLIi8vT3NF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d++66y5J0j/+8Q999tlnyszM1Ndff82+JwGIezlwcC/jbDzt44477lB6errmzZunwsJCPfzww4qOjpYkNWjQQHFxcSorK5PdbucX+jrqdPf61VdfLZvNpjfeeEPDhg1TWVmZFi1aJKfTaXW48DErv7fZx6yO8uyJ4TFx4kRt2LBBDRo00GWXXaZt27bp/fff16pVq9SpUycLI8XZePKYl5enevXqSTp5w0vlf3XZsWOHvvnmG3Xt2tXKUFFDuJcDA/cyKuNpI5528fjjj2vBggXKzs7WyJEjtW/fPs2fP18rV67Ur371K6vDxRl48piTk6OYmBhJFTeYHjRokNatW6elS5fqvPPOszJU+MBPP8c9rPzeph/dYi6X65RjpaWlCgkJ0Z49ezRgwABt2rRJb775pqZMmaJGjRrpgw8+0NGjR7Vs2TJ+kasjKsvj6NGjtWzZMkmS3W5XSUmJbr31Vq1atYpf5AJERkaGDh48WOEY97L/qSyP3MvYu3evNm7cWOGY5xe5PXv2qGvXrlq8eLEeffRRPfXUU7rsssu0adMmOZ1OrVixgqKsjqgsj/3799f8+fMllS+TX1paqvvvv19Lly7V4sWLKcoCwLZt2zRr1qwKxyz/3vb5rDVU2ebNm82FF15oli5desq59PR0k5SUZH7729+eslFhUVGRd0M7WK+qefz55rKvvfaaWbVqVW2FiRq0bt0606JFC/Pll1+eco572X9UNY/cy8Frw4YNplWrVmby5MkVltE2xphdu3aZZs2amdtuu+2Ue53FPuqWqubx5/f6v/71L7N+/fraDBU1ZOPGjcbpdBqbzWZWrlxZ4ZyV39sUZha6+eabjc1mM23btjXffvutMaZ8ZR+3220uvfRSc+21157yoYC655fmkZwGlvXr15uoqCgzZcqUU8653W4zePBgc91115H3Ou5c8khOg8sPP/xgGjVqZO677z5TVFRU4Zzb7TaTJk0ykyZNoo3UceQR69evN+Hh4Wb8+PHm4osvNo888ogxxniLsMsuu8yMGzfOkrwzx8xCb731lrZv364jR45o7ty5+vjjj3XRRRdJOnV8K+ou8hi8Nm/erL59++rOO+/UzJkzVVZWpk2bNqmgoEDR0dE677zz5HK5FBYWxiT/Oow8oipefPFFrV69WnPmzFFpaan++te/avfu3WrRooWuuuoqNW7c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AAAAi1GYAQAAAIDFKMwAAAAAwGIUZgAAAABgMQozAAAAALBYqNUBAADgCzabrcK/Q0NDFRMTo6ZNmyolJUUjRozQqFGjFBrKVx8AoO5hHzMAQEDwFGY33XSTJMntdisnJ0c7duzQ9u3bZYxRu3btNGfOHJ1//vnVfr23335bN998sx577DH98Y9/rPbzAQCCG382BAAElLfffvuUY+np6XrooYf0/vvva+DAgVq+fLl69OhR67EBAHAmzDEDAAS8tm3b6t///rcmTZqkgoICTZw40eqQAACogMIMABA0nnvuOUVFRSk1NVXLli2rcG7BggWaOHGiOnfurOjoaEVFRal79+7685//LJfLVeHaiy++WDfffLMkacaMGbLZbN6fn/fYbd26VRMmTFBSUpKcTqeaNGmia6+9Vps3b67R9woA8C8MZQQABI2YmBgNGzZMH3zwgb7++mv169fPe27SpEkqLCzUeeedp27duiknJ0erVq3Sww8/rC+//FKff/65QkJCJElDhw5VaWmpli9fru7du1cYFtmuXTvvf8+dO1fXXnutXC6XevTooQsuuED79u3T+++/r08//VT//e9/1b9//1p7/wCAuovCDAAQVHr06KEPPvhAW7durXD89ddf12WXXaaIiAjvsePHj2vcuHGaP3++5syZo/Hjx0uS/vCHPyghIUHLly/X6NGjT7v4x+7du3XDDTfI4XBo/vz5Gjx4sPfcwoULNXLkSN1www1KS0tTWFhYzbxZAIDfYCgjACCoNGzYUJJ07NixCsdHjRpVoSiTpPr16+uFF16QJM2bN+8Xvc6LL76o/Px8zZw5s0JRJpX3uN1xxx3at2+fFixY8EvfAgAgANFjBgAIKp5dYn6+75kk/fDDD/rss8+Ulpam/Px8ud1u7/U//PDDL3qdzz//XJJ05ZVXnvb8RRddpJdeekmrVq3SFVdc8YueGwAQeCjMAABB5ciRI5Kk+Ph47zFjjO677z698MILOtP2nsePH/9Fr7N7925JUrNmzaoUDwAguFGYAQCCSmpqqiSpS5cu3mP//ve/9fzzzyspKUkvvPCC+vbtq0aNGsnhcKi4uFhOp/OMBduZuN1uSSc3vD6TPn36/MJ3AAAIRBRmAICgkZOTo0WLFkmSBg4c6D3+8ccfS5JeffVVXX755RUes3PnznN6rebNmys9PV3PPfecGjRocI4RAwCCBYt/AACCxr333qv8/Hz17t1bffv29R73LATSvHnzUx7z/vvvn/a5PCsplpaWnvb8pZdeKulk0QcAwNlQmAEAAt7OnTs1duxYvfnmm4qKitKbb75Z4XyHDh0kSW+88UaFIYtLly7VM888c9rnTExMlCRt3779tOfvvfdeRURE6L777tNHH310ynmXy6UPPvhA+/fvP6f3BAAILDbzSwfNAwBQB3lWWfTM6XK73crNzdWOHTu0bds2GWPUvn17vffee+rVq1eFx+7YsUM9e/ZUfn6+unTpom7duunAgQNatmyZ7r33Xj377LNq2bKld0EPSSoqKlLLli2VmZmpAQMGqE2bNrLb7Zo4caIuvPBCSeVL7I8bN04FBQVq166dOnfurKioKB04cEDr1q1Tfn6+UlNTK2xQDQAIThRmAICA8PPl70NDQxUdHa3ExESlpKRo1KhRGjlypEJCQk77+G3btun+++/Xd999p7y8PHXs2FF33HGHbr31VtlstlMKM0las2aNHnroIa1atUq5ubkyxuitt97ShAkTvNekp6fr+eef1xdffKF9+/bJ4XAoMTFRycnJuvLKKzVq1Cg2mAYAUJgBAAAAgNWYYwYAAAAAFqMwAwAAAACLUZgBAAAAgMUozAAAAADAYhRmAAAAAGAxCjMAAAAAsBiFGQAAAABYjMIMAAAAACxGYQYAAAAAFqMwAwAAAACLUZgBAAAAgMUozAAAAADAYhRmAAAAAGCx/w9EqkaU8PctKgAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "fig,ax=plt.subplots(figsize=(10,5))\n",
        "ax.plot(df_merge.iloc[-60:]['Open'],label='Current Adj Close')\n",
        "ax.plot(upcoming_prediction.iloc[-60:]['Open'],label='Upcoming Adj Close Price')\n",
        "plt.setp(ax.xaxis.get_majorticklabels(), rotation=45)\n",
        "ax.set_xlabel('Date',size=15)\n",
        "ax.set_ylabel('Stock Price',size=15)\n",
        "ax.set_title('Upcoming Adj Close price prediction',size=15)\n",
        "ax.legend()\n",
        "fig.show()"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}